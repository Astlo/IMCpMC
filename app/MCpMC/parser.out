Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> def
Rule 1     empty -> <empty>
Rule 2     def -> mdptype unfold
Rule 3     unfold -> declParamList unfold
Rule 4     unfold -> declConstList unfold
Rule 5     unfold -> declGlobalList unfold
Rule 6     unfold -> moduleList unfold
Rule 7     unfold -> labelList unfold
Rule 8     unfold -> rewards unfold
Rule 9     unfold -> initdef unfold
Rule 10    unfold -> formulas unfold
Rule 11    unfold -> empty
Rule 12    formulas -> formula SC formulas
Rule 13    formulas -> empty
Rule 14    formula -> FORMULA NAME EQUAL funexp
Rule 15    mdptype -> MDP
Rule 16    mdptype -> CTMC
Rule 17    mdptype -> DTMC
Rule 18    declParamList -> declParam SC declParamList
Rule 19    declParamList -> declParam SC
Rule 20    declParam -> PARAM type NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
Rule 21    declParam -> PARAM type NAME
Rule 22    declParam -> PARAM type NAME LACCO funexp POINTPOINT funexp RACCO
Rule 23    type -> empty
Rule 24    type -> INT
Rule 25    type -> TYPEFLOAT
Rule 26    type -> BOOL
Rule 27    type -> DOUBLE
Rule 28    declConstList -> declConst SC declConstList
Rule 29    declConstList -> declConst SC
Rule 30    declConst -> CONST type NAME EQUAL funexp
Rule 31    declGlobalList -> declGlobal SC declGlobalList
Rule 32    declGlobalList -> declGlobal SC
Rule 33    declGlobal -> GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
Rule 34    declGlobal -> GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
Rule 35    declGlobal -> GLOBALL NAME DDOT BOOL
Rule 36    moduleList -> module moduleList
Rule 37    moduleList -> module
Rule 38    module -> modName stateList transList endmodule
Rule 39    module -> reModName LCROCHET listIdState RCROCHET endmodule
Rule 40    modName -> MODULE NAME
Rule 41    reModName -> MODULE NAME EQUAL NAME
Rule 42    listIdState -> NAME EQUAL NAME
Rule 43    listIdState -> NAME EQUAL NAME VIRGULE listIdState
Rule 44    endmodule -> ENDMODULE
Rule 45    stateList -> stateDecl SC stateList
Rule 46    stateList -> empty
Rule 47    stateDecl -> NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
Rule 48    stateDecl -> NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
Rule 49    stateDecl -> NAME DDOT BOOL
Rule 50    transList -> trans SC transList
Rule 51    transList -> empty
Rule 52    trans -> LCROCHET RCROCHET funexp FLECHE updatesProb
Rule 53    trans -> LCROCHET NAME RCROCHET funexp FLECHE updatesProb
Rule 54    updatesProb -> funexp DDOT updates PLUS updatesProb
Rule 55    updatesProb -> funexp DDOT updates
Rule 56    updatesProb -> updates
Rule 57    updates -> upd AND updates
Rule 58    updates -> upd
Rule 59    upd -> LPAR NAME NEW EQUAL funexp RPAR
Rule 60    labelList -> label SC labelList
Rule 61    labelList -> label SC
Rule 62    label -> LABEL QUOTE NAME QUOTE EQUAL listCond
Rule 63    listCond -> NAME EQUAL funexp AND listCond
Rule 64    listCond -> NAME EQUAL funexp
Rule 65    rewards -> REWARDS rew ENDREWARDS rewards
Rule 66    rewards -> REWARDS rew ENDREWARDS
Rule 67    rew -> QUOTE NAME QUOTE funexp DDOT funexp SC rew
Rule 68    rew -> LCROCHET NAME RCROCHET funexp DDOT funexp SC rew
Rule 69    rew -> LCROCHET RCROCHET funexp DDOT funexp SC rew
Rule 70    rew -> empty
Rule 71    initdef -> INIT initlist ENDINIT
Rule 72    initlist -> ainit
Rule 73    initlist -> ainit AND initlist
Rule 74    ainit -> NAME EQUAL funexp
Rule 75    funexp -> funexp PLUS funexp
Rule 76    funexp -> funexp MINUS funexp
Rule 77    funexp -> funexp DIV funexp
Rule 78    funexp -> funexp MULT funexp
Rule 79    funexp -> funexp GEQ funexp
Rule 80    funexp -> funexp GS funexp
Rule 81    funexp -> funexp LS funexp
Rule 82    funexp -> funexp LEQ funexp
Rule 83    funexp -> funexp EQUAL funexp
Rule 84    funexp -> funexp AND funexp
Rule 85    funexp -> funexp OR funexp
Rule 86    funexp -> LPAR funexp RPAR
Rule 87    funexp -> NOT funexp
Rule 88    funexp -> MINUS funexp
Rule 89    funexp -> FLOAT
Rule 90    funexp -> TRUE
Rule 91    funexp -> FALSE
Rule 92    funexp -> NAME
Rule 93    funexp -> NAME LACCO funexp RACCO

Terminals, with rules where they appear

AND                  : 57 63 73 84
BOOL                 : 26 35 49
CONST                : 30
CTMC                 : 16
DDOT                 : 20 33 34 35 47 48 49 54 55 67 68 69
DIV                  : 77
DOUBLE               : 27
DTMC                 : 17
ENDINIT              : 71
ENDMODULE            : 44
ENDREWARDS           : 65 66
EQUAL                : 14 30 41 42 43 59 62 63 64 74 83
FALSE                : 91
FLECHE               : 52 53
FLOAT                : 89
FORMULA              : 14
GEQ                  : 79
GLOBALL              : 33 34 35
GS                   : 80
INIT                 : 34 48 71
INT                  : 24
LABEL                : 62
LACCO                : 22 93
LCROCHET             : 20 33 34 39 47 48 52 53 68 69
LEQ                  : 82
LPAR                 : 59 86
LS                   : 81
MDP                  : 15
MINUS                : 76 88
MODULE               : 40 41
MULT                 : 78
NAME                 : 14 20 21 22 30 33 34 35 40 41 41 42 42 43 43 47 48 49 53 59 62 63 64 67 68 74 92 93
NEW                  : 59
NOT                  : 87
OR                   : 85
PARAM                : 20 21 22
PLUS                 : 54 75
POINTPOINT           : 20 22 33 34 47 48
QUOTE                : 62 62 67 67
RACCO                : 22 93
RCROCHET             : 20 33 34 39 47 48 52 53 68 69
REWARDS              : 65 66
RPAR                 : 59 86
SC                   : 12 18 19 28 29 31 32 45 50 60 61 67 68 69
TRUE                 : 90
TYPEFLOAT            : 25
VIRGULE              : 43
error                : 

Nonterminals, with rules where they appear

ainit                : 72 73
declConst            : 28 29
declConstList        : 4 28
declGlobal           : 31 32
declGlobalList       : 5 31
declParam            : 18 19
declParamList        : 3 18
def                  : 0
empty                : 11 13 23 46 51 70
endmodule            : 38 39
formula              : 12
formulas             : 10 12
funexp               : 14 20 20 22 22 30 33 33 34 34 34 47 47 48 48 48 52 53 54 55 59 63 64 67 67 68 68 69 69 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 87 88 93
initdef              : 9
initlist             : 71 73
label                : 60 61
labelList            : 7 60
listCond             : 62 63
listIdState          : 39 43
mdptype              : 2
modName              : 38
module               : 36 37
moduleList           : 6 36
reModName            : 39
rew                  : 65 66 67 68 69
rewards              : 8 65
stateDecl            : 45
stateList            : 38 45
trans                : 50
transList            : 38 50
type                 : 20 21 22 30
unfold               : 2 3 4 5 6 7 8 9 10
upd                  : 57 58
updates              : 54 55 56 57
updatesProb          : 52 53 54

Parsing method: LALR

state 0

    (0) S' -> . def
    (2) def -> . mdptype unfold
    (15) mdptype -> . MDP
    (16) mdptype -> . CTMC
    (17) mdptype -> . DTMC

    MDP             shift and go to state 3
    CTMC            shift and go to state 4
    DTMC            shift and go to state 5

    def                            shift and go to state 1
    mdptype                        shift and go to state 2

state 1

    (0) S' -> def .



state 2

    (2) def -> mdptype . unfold
    (3) unfold -> . declParamList unfold
    (4) unfold -> . declConstList unfold
    (5) unfold -> . declGlobalList unfold
    (6) unfold -> . moduleList unfold
    (7) unfold -> . labelList unfold
    (8) unfold -> . rewards unfold
    (9) unfold -> . initdef unfold
    (10) unfold -> . formulas unfold
    (11) unfold -> . empty
    (18) declParamList -> . declParam SC declParamList
    (19) declParamList -> . declParam SC
    (28) declConstList -> . declConst SC declConstList
    (29) declConstList -> . declConst SC
    (31) declGlobalList -> . declGlobal SC declGlobalList
    (32) declGlobalList -> . declGlobal SC
    (36) moduleList -> . module moduleList
    (37) moduleList -> . module
    (60) labelList -> . label SC labelList
    (61) labelList -> . label SC
    (65) rewards -> . REWARDS rew ENDREWARDS rewards
    (66) rewards -> . REWARDS rew ENDREWARDS
    (71) initdef -> . INIT initlist ENDINIT
    (12) formulas -> . formula SC formulas
    (13) formulas -> . empty
    (1) empty -> .
    (20) declParam -> . PARAM type NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (21) declParam -> . PARAM type NAME
    (22) declParam -> . PARAM type NAME LACCO funexp POINTPOINT funexp RACCO
    (30) declConst -> . CONST type NAME EQUAL funexp
    (33) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (34) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
    (35) declGlobal -> . GLOBALL NAME DDOT BOOL
    (38) module -> . modName stateList transList endmodule
    (39) module -> . reModName LCROCHET listIdState RCROCHET endmodule
    (62) label -> . LABEL QUOTE NAME QUOTE EQUAL listCond
    (14) formula -> . FORMULA NAME EQUAL funexp
    (40) modName -> . MODULE NAME
    (41) reModName -> . MODULE NAME EQUAL NAME

  ! shift/reduce conflict for REWARDS resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for GLOBALL resolved as shift
  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for FORMULA resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
    REWARDS         shift and go to state 21
    INIT            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    PARAM           shift and go to state 24
    CONST           shift and go to state 25
    GLOBALL         shift and go to state 26
    LABEL           shift and go to state 29
    FORMULA         shift and go to state 30
    MODULE          shift and go to state 31

  ! REWARDS         [ reduce using rule 1 (empty -> .) ]
  ! INIT            [ reduce using rule 1 (empty -> .) ]
  ! PARAM           [ reduce using rule 1 (empty -> .) ]
  ! CONST           [ reduce using rule 1 (empty -> .) ]
  ! GLOBALL         [ reduce using rule 1 (empty -> .) ]
  ! LABEL           [ reduce using rule 1 (empty -> .) ]
  ! FORMULA         [ reduce using rule 1 (empty -> .) ]
  ! MODULE          [ reduce using rule 1 (empty -> .) ]

    unfold                         shift and go to state 6
    declParamList                  shift and go to state 7
    declConstList                  shift and go to state 8
    declGlobalList                 shift and go to state 9
    moduleList                     shift and go to state 10
    labelList                      shift and go to state 11
    rewards                        shift and go to state 12
    initdef                        shift and go to state 13
    formulas                       shift and go to state 14
    empty                          shift and go to state 15
    declParam                      shift and go to state 16
    declConst                      shift and go to state 17
    declGlobal                     shift and go to state 18
    module                         shift and go to state 19
    label                          shift and go to state 20
    formula                        shift and go to state 23
    modName                        shift and go to state 27
    reModName                      shift and go to state 28

state 3

    (15) mdptype -> MDP .

    REWARDS         reduce using rule 15 (mdptype -> MDP .)
    INIT            reduce using rule 15 (mdptype -> MDP .)
    PARAM           reduce using rule 15 (mdptype -> MDP .)
    CONST           reduce using rule 15 (mdptype -> MDP .)
    GLOBALL         reduce using rule 15 (mdptype -> MDP .)
    LABEL           reduce using rule 15 (mdptype -> MDP .)
    FORMULA         reduce using rule 15 (mdptype -> MDP .)
    MODULE          reduce using rule 15 (mdptype -> MDP .)
    $end            reduce using rule 15 (mdptype -> MDP .)


state 4

    (16) mdptype -> CTMC .

    REWARDS         reduce using rule 16 (mdptype -> CTMC .)
    INIT            reduce using rule 16 (mdptype -> CTMC .)
    PARAM           reduce using rule 16 (mdptype -> CTMC .)
    CONST           reduce using rule 16 (mdptype -> CTMC .)
    GLOBALL         reduce using rule 16 (mdptype -> CTMC .)
    LABEL           reduce using rule 16 (mdptype -> CTMC .)
    FORMULA         reduce using rule 16 (mdptype -> CTMC .)
    MODULE          reduce using rule 16 (mdptype -> CTMC .)
    $end            reduce using rule 16 (mdptype -> CTMC .)


state 5

    (17) mdptype -> DTMC .

    REWARDS         reduce using rule 17 (mdptype -> DTMC .)
    INIT            reduce using rule 17 (mdptype -> DTMC .)
    PARAM           reduce using rule 17 (mdptype -> DTMC .)
    CONST           reduce using rule 17 (mdptype -> DTMC .)
    GLOBALL         reduce using rule 17 (mdptype -> DTMC .)
    LABEL           reduce using rule 17 (mdptype -> DTMC .)
    FORMULA         reduce using rule 17 (mdptype -> DTMC .)
    MODULE          reduce using rule 17 (mdptype -> DTMC .)
    $end            reduce using rule 17 (mdptype -> DTMC .)


state 6

    (2) def -> mdptype unfold .

    $end            reduce using rule 2 (def -> mdptype unfold .)


state 7

    (3) unfold -> declParamList . unfold
    (3) unfold -> . declParamList unfold
    (4) unfold -> . declConstList unfold
    (5) unfold -> . declGlobalList unfold
    (6) unfold -> . moduleList unfold
    (7) unfold -> . labelList unfold
    (8) unfold -> . rewards unfold
    (9) unfold -> . initdef unfold
    (10) unfold -> . formulas unfold
    (11) unfold -> . empty
    (18) declParamList -> . declParam SC declParamList
    (19) declParamList -> . declParam SC
    (28) declConstList -> . declConst SC declConstList
    (29) declConstList -> . declConst SC
    (31) declGlobalList -> . declGlobal SC declGlobalList
    (32) declGlobalList -> . declGlobal SC
    (36) moduleList -> . module moduleList
    (37) moduleList -> . module
    (60) labelList -> . label SC labelList
    (61) labelList -> . label SC
    (65) rewards -> . REWARDS rew ENDREWARDS rewards
    (66) rewards -> . REWARDS rew ENDREWARDS
    (71) initdef -> . INIT initlist ENDINIT
    (12) formulas -> . formula SC formulas
    (13) formulas -> . empty
    (1) empty -> .
    (20) declParam -> . PARAM type NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (21) declParam -> . PARAM type NAME
    (22) declParam -> . PARAM type NAME LACCO funexp POINTPOINT funexp RACCO
    (30) declConst -> . CONST type NAME EQUAL funexp
    (33) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (34) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
    (35) declGlobal -> . GLOBALL NAME DDOT BOOL
    (38) module -> . modName stateList transList endmodule
    (39) module -> . reModName LCROCHET listIdState RCROCHET endmodule
    (62) label -> . LABEL QUOTE NAME QUOTE EQUAL listCond
    (14) formula -> . FORMULA NAME EQUAL funexp
    (40) modName -> . MODULE NAME
    (41) reModName -> . MODULE NAME EQUAL NAME

  ! shift/reduce conflict for REWARDS resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for GLOBALL resolved as shift
  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for FORMULA resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
    REWARDS         shift and go to state 21
    INIT            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    PARAM           shift and go to state 24
    CONST           shift and go to state 25
    GLOBALL         shift and go to state 26
    LABEL           shift and go to state 29
    FORMULA         shift and go to state 30
    MODULE          shift and go to state 31

  ! REWARDS         [ reduce using rule 1 (empty -> .) ]
  ! INIT            [ reduce using rule 1 (empty -> .) ]
  ! PARAM           [ reduce using rule 1 (empty -> .) ]
  ! CONST           [ reduce using rule 1 (empty -> .) ]
  ! GLOBALL         [ reduce using rule 1 (empty -> .) ]
  ! LABEL           [ reduce using rule 1 (empty -> .) ]
  ! FORMULA         [ reduce using rule 1 (empty -> .) ]
  ! MODULE          [ reduce using rule 1 (empty -> .) ]

    declParamList                  shift and go to state 7
    unfold                         shift and go to state 32
    declConstList                  shift and go to state 8
    declGlobalList                 shift and go to state 9
    moduleList                     shift and go to state 10
    labelList                      shift and go to state 11
    rewards                        shift and go to state 12
    initdef                        shift and go to state 13
    formulas                       shift and go to state 14
    empty                          shift and go to state 15
    declParam                      shift and go to state 16
    declConst                      shift and go to state 17
    declGlobal                     shift and go to state 18
    module                         shift and go to state 19
    label                          shift and go to state 20
    formula                        shift and go to state 23
    modName                        shift and go to state 27
    reModName                      shift and go to state 28

state 8

    (4) unfold -> declConstList . unfold
    (3) unfold -> . declParamList unfold
    (4) unfold -> . declConstList unfold
    (5) unfold -> . declGlobalList unfold
    (6) unfold -> . moduleList unfold
    (7) unfold -> . labelList unfold
    (8) unfold -> . rewards unfold
    (9) unfold -> . initdef unfold
    (10) unfold -> . formulas unfold
    (11) unfold -> . empty
    (18) declParamList -> . declParam SC declParamList
    (19) declParamList -> . declParam SC
    (28) declConstList -> . declConst SC declConstList
    (29) declConstList -> . declConst SC
    (31) declGlobalList -> . declGlobal SC declGlobalList
    (32) declGlobalList -> . declGlobal SC
    (36) moduleList -> . module moduleList
    (37) moduleList -> . module
    (60) labelList -> . label SC labelList
    (61) labelList -> . label SC
    (65) rewards -> . REWARDS rew ENDREWARDS rewards
    (66) rewards -> . REWARDS rew ENDREWARDS
    (71) initdef -> . INIT initlist ENDINIT
    (12) formulas -> . formula SC formulas
    (13) formulas -> . empty
    (1) empty -> .
    (20) declParam -> . PARAM type NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (21) declParam -> . PARAM type NAME
    (22) declParam -> . PARAM type NAME LACCO funexp POINTPOINT funexp RACCO
    (30) declConst -> . CONST type NAME EQUAL funexp
    (33) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (34) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
    (35) declGlobal -> . GLOBALL NAME DDOT BOOL
    (38) module -> . modName stateList transList endmodule
    (39) module -> . reModName LCROCHET listIdState RCROCHET endmodule
    (62) label -> . LABEL QUOTE NAME QUOTE EQUAL listCond
    (14) formula -> . FORMULA NAME EQUAL funexp
    (40) modName -> . MODULE NAME
    (41) reModName -> . MODULE NAME EQUAL NAME

  ! shift/reduce conflict for REWARDS resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for GLOBALL resolved as shift
  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for FORMULA resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
    REWARDS         shift and go to state 21
    INIT            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    PARAM           shift and go to state 24
    CONST           shift and go to state 25
    GLOBALL         shift and go to state 26
    LABEL           shift and go to state 29
    FORMULA         shift and go to state 30
    MODULE          shift and go to state 31

  ! REWARDS         [ reduce using rule 1 (empty -> .) ]
  ! INIT            [ reduce using rule 1 (empty -> .) ]
  ! PARAM           [ reduce using rule 1 (empty -> .) ]
  ! CONST           [ reduce using rule 1 (empty -> .) ]
  ! GLOBALL         [ reduce using rule 1 (empty -> .) ]
  ! LABEL           [ reduce using rule 1 (empty -> .) ]
  ! FORMULA         [ reduce using rule 1 (empty -> .) ]
  ! MODULE          [ reduce using rule 1 (empty -> .) ]

    declConstList                  shift and go to state 8
    unfold                         shift and go to state 33
    declParamList                  shift and go to state 7
    declGlobalList                 shift and go to state 9
    moduleList                     shift and go to state 10
    labelList                      shift and go to state 11
    rewards                        shift and go to state 12
    initdef                        shift and go to state 13
    formulas                       shift and go to state 14
    empty                          shift and go to state 15
    declParam                      shift and go to state 16
    declConst                      shift and go to state 17
    declGlobal                     shift and go to state 18
    module                         shift and go to state 19
    label                          shift and go to state 20
    formula                        shift and go to state 23
    modName                        shift and go to state 27
    reModName                      shift and go to state 28

state 9

    (5) unfold -> declGlobalList . unfold
    (3) unfold -> . declParamList unfold
    (4) unfold -> . declConstList unfold
    (5) unfold -> . declGlobalList unfold
    (6) unfold -> . moduleList unfold
    (7) unfold -> . labelList unfold
    (8) unfold -> . rewards unfold
    (9) unfold -> . initdef unfold
    (10) unfold -> . formulas unfold
    (11) unfold -> . empty
    (18) declParamList -> . declParam SC declParamList
    (19) declParamList -> . declParam SC
    (28) declConstList -> . declConst SC declConstList
    (29) declConstList -> . declConst SC
    (31) declGlobalList -> . declGlobal SC declGlobalList
    (32) declGlobalList -> . declGlobal SC
    (36) moduleList -> . module moduleList
    (37) moduleList -> . module
    (60) labelList -> . label SC labelList
    (61) labelList -> . label SC
    (65) rewards -> . REWARDS rew ENDREWARDS rewards
    (66) rewards -> . REWARDS rew ENDREWARDS
    (71) initdef -> . INIT initlist ENDINIT
    (12) formulas -> . formula SC formulas
    (13) formulas -> . empty
    (1) empty -> .
    (20) declParam -> . PARAM type NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (21) declParam -> . PARAM type NAME
    (22) declParam -> . PARAM type NAME LACCO funexp POINTPOINT funexp RACCO
    (30) declConst -> . CONST type NAME EQUAL funexp
    (33) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (34) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
    (35) declGlobal -> . GLOBALL NAME DDOT BOOL
    (38) module -> . modName stateList transList endmodule
    (39) module -> . reModName LCROCHET listIdState RCROCHET endmodule
    (62) label -> . LABEL QUOTE NAME QUOTE EQUAL listCond
    (14) formula -> . FORMULA NAME EQUAL funexp
    (40) modName -> . MODULE NAME
    (41) reModName -> . MODULE NAME EQUAL NAME

  ! shift/reduce conflict for REWARDS resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for GLOBALL resolved as shift
  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for FORMULA resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
    REWARDS         shift and go to state 21
    INIT            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    PARAM           shift and go to state 24
    CONST           shift and go to state 25
    GLOBALL         shift and go to state 26
    LABEL           shift and go to state 29
    FORMULA         shift and go to state 30
    MODULE          shift and go to state 31

  ! REWARDS         [ reduce using rule 1 (empty -> .) ]
  ! INIT            [ reduce using rule 1 (empty -> .) ]
  ! PARAM           [ reduce using rule 1 (empty -> .) ]
  ! CONST           [ reduce using rule 1 (empty -> .) ]
  ! GLOBALL         [ reduce using rule 1 (empty -> .) ]
  ! LABEL           [ reduce using rule 1 (empty -> .) ]
  ! FORMULA         [ reduce using rule 1 (empty -> .) ]
  ! MODULE          [ reduce using rule 1 (empty -> .) ]

    declGlobalList                 shift and go to state 9
    unfold                         shift and go to state 34
    declParamList                  shift and go to state 7
    declConstList                  shift and go to state 8
    moduleList                     shift and go to state 10
    labelList                      shift and go to state 11
    rewards                        shift and go to state 12
    initdef                        shift and go to state 13
    formulas                       shift and go to state 14
    empty                          shift and go to state 15
    declParam                      shift and go to state 16
    declConst                      shift and go to state 17
    declGlobal                     shift and go to state 18
    module                         shift and go to state 19
    label                          shift and go to state 20
    formula                        shift and go to state 23
    modName                        shift and go to state 27
    reModName                      shift and go to state 28

state 10

    (6) unfold -> moduleList . unfold
    (3) unfold -> . declParamList unfold
    (4) unfold -> . declConstList unfold
    (5) unfold -> . declGlobalList unfold
    (6) unfold -> . moduleList unfold
    (7) unfold -> . labelList unfold
    (8) unfold -> . rewards unfold
    (9) unfold -> . initdef unfold
    (10) unfold -> . formulas unfold
    (11) unfold -> . empty
    (18) declParamList -> . declParam SC declParamList
    (19) declParamList -> . declParam SC
    (28) declConstList -> . declConst SC declConstList
    (29) declConstList -> . declConst SC
    (31) declGlobalList -> . declGlobal SC declGlobalList
    (32) declGlobalList -> . declGlobal SC
    (36) moduleList -> . module moduleList
    (37) moduleList -> . module
    (60) labelList -> . label SC labelList
    (61) labelList -> . label SC
    (65) rewards -> . REWARDS rew ENDREWARDS rewards
    (66) rewards -> . REWARDS rew ENDREWARDS
    (71) initdef -> . INIT initlist ENDINIT
    (12) formulas -> . formula SC formulas
    (13) formulas -> . empty
    (1) empty -> .
    (20) declParam -> . PARAM type NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (21) declParam -> . PARAM type NAME
    (22) declParam -> . PARAM type NAME LACCO funexp POINTPOINT funexp RACCO
    (30) declConst -> . CONST type NAME EQUAL funexp
    (33) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (34) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
    (35) declGlobal -> . GLOBALL NAME DDOT BOOL
    (38) module -> . modName stateList transList endmodule
    (39) module -> . reModName LCROCHET listIdState RCROCHET endmodule
    (62) label -> . LABEL QUOTE NAME QUOTE EQUAL listCond
    (14) formula -> . FORMULA NAME EQUAL funexp
    (40) modName -> . MODULE NAME
    (41) reModName -> . MODULE NAME EQUAL NAME

  ! shift/reduce conflict for REWARDS resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for GLOBALL resolved as shift
  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for FORMULA resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
    REWARDS         shift and go to state 21
    INIT            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    PARAM           shift and go to state 24
    CONST           shift and go to state 25
    GLOBALL         shift and go to state 26
    LABEL           shift and go to state 29
    FORMULA         shift and go to state 30
    MODULE          shift and go to state 31

  ! REWARDS         [ reduce using rule 1 (empty -> .) ]
  ! INIT            [ reduce using rule 1 (empty -> .) ]
  ! PARAM           [ reduce using rule 1 (empty -> .) ]
  ! CONST           [ reduce using rule 1 (empty -> .) ]
  ! GLOBALL         [ reduce using rule 1 (empty -> .) ]
  ! LABEL           [ reduce using rule 1 (empty -> .) ]
  ! FORMULA         [ reduce using rule 1 (empty -> .) ]
  ! MODULE          [ reduce using rule 1 (empty -> .) ]

    moduleList                     shift and go to state 10
    unfold                         shift and go to state 35
    declParamList                  shift and go to state 7
    declConstList                  shift and go to state 8
    declGlobalList                 shift and go to state 9
    labelList                      shift and go to state 11
    rewards                        shift and go to state 12
    initdef                        shift and go to state 13
    formulas                       shift and go to state 14
    empty                          shift and go to state 15
    declParam                      shift and go to state 16
    declConst                      shift and go to state 17
    declGlobal                     shift and go to state 18
    module                         shift and go to state 19
    label                          shift and go to state 20
    formula                        shift and go to state 23
    modName                        shift and go to state 27
    reModName                      shift and go to state 28

state 11

    (7) unfold -> labelList . unfold
    (3) unfold -> . declParamList unfold
    (4) unfold -> . declConstList unfold
    (5) unfold -> . declGlobalList unfold
    (6) unfold -> . moduleList unfold
    (7) unfold -> . labelList unfold
    (8) unfold -> . rewards unfold
    (9) unfold -> . initdef unfold
    (10) unfold -> . formulas unfold
    (11) unfold -> . empty
    (18) declParamList -> . declParam SC declParamList
    (19) declParamList -> . declParam SC
    (28) declConstList -> . declConst SC declConstList
    (29) declConstList -> . declConst SC
    (31) declGlobalList -> . declGlobal SC declGlobalList
    (32) declGlobalList -> . declGlobal SC
    (36) moduleList -> . module moduleList
    (37) moduleList -> . module
    (60) labelList -> . label SC labelList
    (61) labelList -> . label SC
    (65) rewards -> . REWARDS rew ENDREWARDS rewards
    (66) rewards -> . REWARDS rew ENDREWARDS
    (71) initdef -> . INIT initlist ENDINIT
    (12) formulas -> . formula SC formulas
    (13) formulas -> . empty
    (1) empty -> .
    (20) declParam -> . PARAM type NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (21) declParam -> . PARAM type NAME
    (22) declParam -> . PARAM type NAME LACCO funexp POINTPOINT funexp RACCO
    (30) declConst -> . CONST type NAME EQUAL funexp
    (33) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (34) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
    (35) declGlobal -> . GLOBALL NAME DDOT BOOL
    (38) module -> . modName stateList transList endmodule
    (39) module -> . reModName LCROCHET listIdState RCROCHET endmodule
    (62) label -> . LABEL QUOTE NAME QUOTE EQUAL listCond
    (14) formula -> . FORMULA NAME EQUAL funexp
    (40) modName -> . MODULE NAME
    (41) reModName -> . MODULE NAME EQUAL NAME

  ! shift/reduce conflict for REWARDS resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for GLOBALL resolved as shift
  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for FORMULA resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
    REWARDS         shift and go to state 21
    INIT            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    PARAM           shift and go to state 24
    CONST           shift and go to state 25
    GLOBALL         shift and go to state 26
    LABEL           shift and go to state 29
    FORMULA         shift and go to state 30
    MODULE          shift and go to state 31

  ! REWARDS         [ reduce using rule 1 (empty -> .) ]
  ! INIT            [ reduce using rule 1 (empty -> .) ]
  ! PARAM           [ reduce using rule 1 (empty -> .) ]
  ! CONST           [ reduce using rule 1 (empty -> .) ]
  ! GLOBALL         [ reduce using rule 1 (empty -> .) ]
  ! LABEL           [ reduce using rule 1 (empty -> .) ]
  ! FORMULA         [ reduce using rule 1 (empty -> .) ]
  ! MODULE          [ reduce using rule 1 (empty -> .) ]

    labelList                      shift and go to state 11
    unfold                         shift and go to state 36
    declParamList                  shift and go to state 7
    declConstList                  shift and go to state 8
    declGlobalList                 shift and go to state 9
    moduleList                     shift and go to state 10
    rewards                        shift and go to state 12
    initdef                        shift and go to state 13
    formulas                       shift and go to state 14
    empty                          shift and go to state 15
    declParam                      shift and go to state 16
    declConst                      shift and go to state 17
    declGlobal                     shift and go to state 18
    module                         shift and go to state 19
    label                          shift and go to state 20
    formula                        shift and go to state 23
    modName                        shift and go to state 27
    reModName                      shift and go to state 28

state 12

    (8) unfold -> rewards . unfold
    (3) unfold -> . declParamList unfold
    (4) unfold -> . declConstList unfold
    (5) unfold -> . declGlobalList unfold
    (6) unfold -> . moduleList unfold
    (7) unfold -> . labelList unfold
    (8) unfold -> . rewards unfold
    (9) unfold -> . initdef unfold
    (10) unfold -> . formulas unfold
    (11) unfold -> . empty
    (18) declParamList -> . declParam SC declParamList
    (19) declParamList -> . declParam SC
    (28) declConstList -> . declConst SC declConstList
    (29) declConstList -> . declConst SC
    (31) declGlobalList -> . declGlobal SC declGlobalList
    (32) declGlobalList -> . declGlobal SC
    (36) moduleList -> . module moduleList
    (37) moduleList -> . module
    (60) labelList -> . label SC labelList
    (61) labelList -> . label SC
    (65) rewards -> . REWARDS rew ENDREWARDS rewards
    (66) rewards -> . REWARDS rew ENDREWARDS
    (71) initdef -> . INIT initlist ENDINIT
    (12) formulas -> . formula SC formulas
    (13) formulas -> . empty
    (1) empty -> .
    (20) declParam -> . PARAM type NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (21) declParam -> . PARAM type NAME
    (22) declParam -> . PARAM type NAME LACCO funexp POINTPOINT funexp RACCO
    (30) declConst -> . CONST type NAME EQUAL funexp
    (33) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (34) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
    (35) declGlobal -> . GLOBALL NAME DDOT BOOL
    (38) module -> . modName stateList transList endmodule
    (39) module -> . reModName LCROCHET listIdState RCROCHET endmodule
    (62) label -> . LABEL QUOTE NAME QUOTE EQUAL listCond
    (14) formula -> . FORMULA NAME EQUAL funexp
    (40) modName -> . MODULE NAME
    (41) reModName -> . MODULE NAME EQUAL NAME

  ! shift/reduce conflict for REWARDS resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for GLOBALL resolved as shift
  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for FORMULA resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
    REWARDS         shift and go to state 21
    INIT            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    PARAM           shift and go to state 24
    CONST           shift and go to state 25
    GLOBALL         shift and go to state 26
    LABEL           shift and go to state 29
    FORMULA         shift and go to state 30
    MODULE          shift and go to state 31

  ! REWARDS         [ reduce using rule 1 (empty -> .) ]
  ! INIT            [ reduce using rule 1 (empty -> .) ]
  ! PARAM           [ reduce using rule 1 (empty -> .) ]
  ! CONST           [ reduce using rule 1 (empty -> .) ]
  ! GLOBALL         [ reduce using rule 1 (empty -> .) ]
  ! LABEL           [ reduce using rule 1 (empty -> .) ]
  ! FORMULA         [ reduce using rule 1 (empty -> .) ]
  ! MODULE          [ reduce using rule 1 (empty -> .) ]

    rewards                        shift and go to state 12
    unfold                         shift and go to state 37
    declParamList                  shift and go to state 7
    declConstList                  shift and go to state 8
    declGlobalList                 shift and go to state 9
    moduleList                     shift and go to state 10
    labelList                      shift and go to state 11
    initdef                        shift and go to state 13
    formulas                       shift and go to state 14
    empty                          shift and go to state 15
    declParam                      shift and go to state 16
    declConst                      shift and go to state 17
    declGlobal                     shift and go to state 18
    module                         shift and go to state 19
    label                          shift and go to state 20
    formula                        shift and go to state 23
    modName                        shift and go to state 27
    reModName                      shift and go to state 28

state 13

    (9) unfold -> initdef . unfold
    (3) unfold -> . declParamList unfold
    (4) unfold -> . declConstList unfold
    (5) unfold -> . declGlobalList unfold
    (6) unfold -> . moduleList unfold
    (7) unfold -> . labelList unfold
    (8) unfold -> . rewards unfold
    (9) unfold -> . initdef unfold
    (10) unfold -> . formulas unfold
    (11) unfold -> . empty
    (18) declParamList -> . declParam SC declParamList
    (19) declParamList -> . declParam SC
    (28) declConstList -> . declConst SC declConstList
    (29) declConstList -> . declConst SC
    (31) declGlobalList -> . declGlobal SC declGlobalList
    (32) declGlobalList -> . declGlobal SC
    (36) moduleList -> . module moduleList
    (37) moduleList -> . module
    (60) labelList -> . label SC labelList
    (61) labelList -> . label SC
    (65) rewards -> . REWARDS rew ENDREWARDS rewards
    (66) rewards -> . REWARDS rew ENDREWARDS
    (71) initdef -> . INIT initlist ENDINIT
    (12) formulas -> . formula SC formulas
    (13) formulas -> . empty
    (1) empty -> .
    (20) declParam -> . PARAM type NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (21) declParam -> . PARAM type NAME
    (22) declParam -> . PARAM type NAME LACCO funexp POINTPOINT funexp RACCO
    (30) declConst -> . CONST type NAME EQUAL funexp
    (33) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (34) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
    (35) declGlobal -> . GLOBALL NAME DDOT BOOL
    (38) module -> . modName stateList transList endmodule
    (39) module -> . reModName LCROCHET listIdState RCROCHET endmodule
    (62) label -> . LABEL QUOTE NAME QUOTE EQUAL listCond
    (14) formula -> . FORMULA NAME EQUAL funexp
    (40) modName -> . MODULE NAME
    (41) reModName -> . MODULE NAME EQUAL NAME

  ! shift/reduce conflict for REWARDS resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for GLOBALL resolved as shift
  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for FORMULA resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
    REWARDS         shift and go to state 21
    INIT            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    PARAM           shift and go to state 24
    CONST           shift and go to state 25
    GLOBALL         shift and go to state 26
    LABEL           shift and go to state 29
    FORMULA         shift and go to state 30
    MODULE          shift and go to state 31

  ! REWARDS         [ reduce using rule 1 (empty -> .) ]
  ! INIT            [ reduce using rule 1 (empty -> .) ]
  ! PARAM           [ reduce using rule 1 (empty -> .) ]
  ! CONST           [ reduce using rule 1 (empty -> .) ]
  ! GLOBALL         [ reduce using rule 1 (empty -> .) ]
  ! LABEL           [ reduce using rule 1 (empty -> .) ]
  ! FORMULA         [ reduce using rule 1 (empty -> .) ]
  ! MODULE          [ reduce using rule 1 (empty -> .) ]

    initdef                        shift and go to state 13
    unfold                         shift and go to state 38
    declParamList                  shift and go to state 7
    declConstList                  shift and go to state 8
    declGlobalList                 shift and go to state 9
    moduleList                     shift and go to state 10
    labelList                      shift and go to state 11
    rewards                        shift and go to state 12
    formulas                       shift and go to state 14
    empty                          shift and go to state 15
    declParam                      shift and go to state 16
    declConst                      shift and go to state 17
    declGlobal                     shift and go to state 18
    module                         shift and go to state 19
    label                          shift and go to state 20
    formula                        shift and go to state 23
    modName                        shift and go to state 27
    reModName                      shift and go to state 28

state 14

    (10) unfold -> formulas . unfold
    (3) unfold -> . declParamList unfold
    (4) unfold -> . declConstList unfold
    (5) unfold -> . declGlobalList unfold
    (6) unfold -> . moduleList unfold
    (7) unfold -> . labelList unfold
    (8) unfold -> . rewards unfold
    (9) unfold -> . initdef unfold
    (10) unfold -> . formulas unfold
    (11) unfold -> . empty
    (18) declParamList -> . declParam SC declParamList
    (19) declParamList -> . declParam SC
    (28) declConstList -> . declConst SC declConstList
    (29) declConstList -> . declConst SC
    (31) declGlobalList -> . declGlobal SC declGlobalList
    (32) declGlobalList -> . declGlobal SC
    (36) moduleList -> . module moduleList
    (37) moduleList -> . module
    (60) labelList -> . label SC labelList
    (61) labelList -> . label SC
    (65) rewards -> . REWARDS rew ENDREWARDS rewards
    (66) rewards -> . REWARDS rew ENDREWARDS
    (71) initdef -> . INIT initlist ENDINIT
    (12) formulas -> . formula SC formulas
    (13) formulas -> . empty
    (1) empty -> .
    (20) declParam -> . PARAM type NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (21) declParam -> . PARAM type NAME
    (22) declParam -> . PARAM type NAME LACCO funexp POINTPOINT funexp RACCO
    (30) declConst -> . CONST type NAME EQUAL funexp
    (33) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (34) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
    (35) declGlobal -> . GLOBALL NAME DDOT BOOL
    (38) module -> . modName stateList transList endmodule
    (39) module -> . reModName LCROCHET listIdState RCROCHET endmodule
    (62) label -> . LABEL QUOTE NAME QUOTE EQUAL listCond
    (14) formula -> . FORMULA NAME EQUAL funexp
    (40) modName -> . MODULE NAME
    (41) reModName -> . MODULE NAME EQUAL NAME

  ! shift/reduce conflict for REWARDS resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for PARAM resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for GLOBALL resolved as shift
  ! shift/reduce conflict for LABEL resolved as shift
  ! shift/reduce conflict for FORMULA resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
    REWARDS         shift and go to state 21
    INIT            shift and go to state 22
    $end            reduce using rule 1 (empty -> .)
    PARAM           shift and go to state 24
    CONST           shift and go to state 25
    GLOBALL         shift and go to state 26
    LABEL           shift and go to state 29
    FORMULA         shift and go to state 30
    MODULE          shift and go to state 31

  ! REWARDS         [ reduce using rule 1 (empty -> .) ]
  ! INIT            [ reduce using rule 1 (empty -> .) ]
  ! PARAM           [ reduce using rule 1 (empty -> .) ]
  ! CONST           [ reduce using rule 1 (empty -> .) ]
  ! GLOBALL         [ reduce using rule 1 (empty -> .) ]
  ! LABEL           [ reduce using rule 1 (empty -> .) ]
  ! FORMULA         [ reduce using rule 1 (empty -> .) ]
  ! MODULE          [ reduce using rule 1 (empty -> .) ]

    formulas                       shift and go to state 14
    unfold                         shift and go to state 39
    declParamList                  shift and go to state 7
    declConstList                  shift and go to state 8
    declGlobalList                 shift and go to state 9
    moduleList                     shift and go to state 10
    labelList                      shift and go to state 11
    rewards                        shift and go to state 12
    initdef                        shift and go to state 13
    empty                          shift and go to state 15
    declParam                      shift and go to state 16
    declConst                      shift and go to state 17
    declGlobal                     shift and go to state 18
    module                         shift and go to state 19
    label                          shift and go to state 20
    formula                        shift and go to state 23
    modName                        shift and go to state 27
    reModName                      shift and go to state 28

state 15

    (11) unfold -> empty .
    (13) formulas -> empty .

  ! reduce/reduce conflict for $end resolved using rule 11 (unfold -> empty .)
    $end            reduce using rule 11 (unfold -> empty .)
    REWARDS         reduce using rule 13 (formulas -> empty .)
    INIT            reduce using rule 13 (formulas -> empty .)
    PARAM           reduce using rule 13 (formulas -> empty .)
    CONST           reduce using rule 13 (formulas -> empty .)
    GLOBALL         reduce using rule 13 (formulas -> empty .)
    LABEL           reduce using rule 13 (formulas -> empty .)
    FORMULA         reduce using rule 13 (formulas -> empty .)
    MODULE          reduce using rule 13 (formulas -> empty .)

  ! $end            [ reduce using rule 13 (formulas -> empty .) ]


state 16

    (18) declParamList -> declParam . SC declParamList
    (19) declParamList -> declParam . SC

    SC              shift and go to state 40


state 17

    (28) declConstList -> declConst . SC declConstList
    (29) declConstList -> declConst . SC

    SC              shift and go to state 41


state 18

    (31) declGlobalList -> declGlobal . SC declGlobalList
    (32) declGlobalList -> declGlobal . SC

    SC              shift and go to state 42


state 19

    (36) moduleList -> module . moduleList
    (37) moduleList -> module .
    (36) moduleList -> . module moduleList
    (37) moduleList -> . module
    (38) module -> . modName stateList transList endmodule
    (39) module -> . reModName LCROCHET listIdState RCROCHET endmodule
    (40) modName -> . MODULE NAME
    (41) reModName -> . MODULE NAME EQUAL NAME

  ! shift/reduce conflict for MODULE resolved as shift
    REWARDS         reduce using rule 37 (moduleList -> module .)
    INIT            reduce using rule 37 (moduleList -> module .)
    PARAM           reduce using rule 37 (moduleList -> module .)
    CONST           reduce using rule 37 (moduleList -> module .)
    GLOBALL         reduce using rule 37 (moduleList -> module .)
    LABEL           reduce using rule 37 (moduleList -> module .)
    FORMULA         reduce using rule 37 (moduleList -> module .)
    $end            reduce using rule 37 (moduleList -> module .)
    MODULE          shift and go to state 31

  ! MODULE          [ reduce using rule 37 (moduleList -> module .) ]

    module                         shift and go to state 19
    moduleList                     shift and go to state 43
    modName                        shift and go to state 27
    reModName                      shift and go to state 28

state 20

    (60) labelList -> label . SC labelList
    (61) labelList -> label . SC

    SC              shift and go to state 44


state 21

    (65) rewards -> REWARDS . rew ENDREWARDS rewards
    (66) rewards -> REWARDS . rew ENDREWARDS
    (67) rew -> . QUOTE NAME QUOTE funexp DDOT funexp SC rew
    (68) rew -> . LCROCHET NAME RCROCHET funexp DDOT funexp SC rew
    (69) rew -> . LCROCHET RCROCHET funexp DDOT funexp SC rew
    (70) rew -> . empty
    (1) empty -> .

    QUOTE           shift and go to state 46
    LCROCHET        shift and go to state 47
    ENDREWARDS      reduce using rule 1 (empty -> .)

    rew                            shift and go to state 45
    empty                          shift and go to state 48

state 22

    (71) initdef -> INIT . initlist ENDINIT
    (72) initlist -> . ainit
    (73) initlist -> . ainit AND initlist
    (74) ainit -> . NAME EQUAL funexp

    NAME            shift and go to state 51

    initlist                       shift and go to state 49
    ainit                          shift and go to state 50

state 23

    (12) formulas -> formula . SC formulas

    SC              shift and go to state 52


state 24

    (20) declParam -> PARAM . type NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (21) declParam -> PARAM . type NAME
    (22) declParam -> PARAM . type NAME LACCO funexp POINTPOINT funexp RACCO
    (23) type -> . empty
    (24) type -> . INT
    (25) type -> . TYPEFLOAT
    (26) type -> . BOOL
    (27) type -> . DOUBLE
    (1) empty -> .

    INT             shift and go to state 55
    TYPEFLOAT       shift and go to state 56
    BOOL            shift and go to state 57
    DOUBLE          shift and go to state 58
    NAME            reduce using rule 1 (empty -> .)

    type                           shift and go to state 53
    empty                          shift and go to state 54

state 25

    (30) declConst -> CONST . type NAME EQUAL funexp
    (23) type -> . empty
    (24) type -> . INT
    (25) type -> . TYPEFLOAT
    (26) type -> . BOOL
    (27) type -> . DOUBLE
    (1) empty -> .

    INT             shift and go to state 55
    TYPEFLOAT       shift and go to state 56
    BOOL            shift and go to state 57
    DOUBLE          shift and go to state 58
    NAME            reduce using rule 1 (empty -> .)

    type                           shift and go to state 59
    empty                          shift and go to state 54

state 26

    (33) declGlobal -> GLOBALL . NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (34) declGlobal -> GLOBALL . NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
    (35) declGlobal -> GLOBALL . NAME DDOT BOOL

    NAME            shift and go to state 60


state 27

    (38) module -> modName . stateList transList endmodule
    (45) stateList -> . stateDecl SC stateList
    (46) stateList -> . empty
    (47) stateDecl -> . NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (48) stateDecl -> . NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
    (49) stateDecl -> . NAME DDOT BOOL
    (1) empty -> .

    NAME            shift and go to state 64
    LCROCHET        reduce using rule 1 (empty -> .)
    ENDMODULE       reduce using rule 1 (empty -> .)

    stateList                      shift and go to state 61
    stateDecl                      shift and go to state 62
    empty                          shift and go to state 63

state 28

    (39) module -> reModName . LCROCHET listIdState RCROCHET endmodule

    LCROCHET        shift and go to state 65


state 29

    (62) label -> LABEL . QUOTE NAME QUOTE EQUAL listCond

    QUOTE           shift and go to state 66


state 30

    (14) formula -> FORMULA . NAME EQUAL funexp

    NAME            shift and go to state 67


state 31

    (40) modName -> MODULE . NAME
    (41) reModName -> MODULE . NAME EQUAL NAME

    NAME            shift and go to state 68


state 32

    (3) unfold -> declParamList unfold .

    $end            reduce using rule 3 (unfold -> declParamList unfold .)


state 33

    (4) unfold -> declConstList unfold .

    $end            reduce using rule 4 (unfold -> declConstList unfold .)


state 34

    (5) unfold -> declGlobalList unfold .

    $end            reduce using rule 5 (unfold -> declGlobalList unfold .)


state 35

    (6) unfold -> moduleList unfold .

    $end            reduce using rule 6 (unfold -> moduleList unfold .)


state 36

    (7) unfold -> labelList unfold .

    $end            reduce using rule 7 (unfold -> labelList unfold .)


state 37

    (8) unfold -> rewards unfold .

    $end            reduce using rule 8 (unfold -> rewards unfold .)


state 38

    (9) unfold -> initdef unfold .

    $end            reduce using rule 9 (unfold -> initdef unfold .)


state 39

    (10) unfold -> formulas unfold .

    $end            reduce using rule 10 (unfold -> formulas unfold .)


state 40

    (18) declParamList -> declParam SC . declParamList
    (19) declParamList -> declParam SC .
    (18) declParamList -> . declParam SC declParamList
    (19) declParamList -> . declParam SC
    (20) declParam -> . PARAM type NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (21) declParam -> . PARAM type NAME
    (22) declParam -> . PARAM type NAME LACCO funexp POINTPOINT funexp RACCO

  ! shift/reduce conflict for PARAM resolved as shift
    REWARDS         reduce using rule 19 (declParamList -> declParam SC .)
    INIT            reduce using rule 19 (declParamList -> declParam SC .)
    CONST           reduce using rule 19 (declParamList -> declParam SC .)
    GLOBALL         reduce using rule 19 (declParamList -> declParam SC .)
    LABEL           reduce using rule 19 (declParamList -> declParam SC .)
    FORMULA         reduce using rule 19 (declParamList -> declParam SC .)
    MODULE          reduce using rule 19 (declParamList -> declParam SC .)
    $end            reduce using rule 19 (declParamList -> declParam SC .)
    PARAM           shift and go to state 24

  ! PARAM           [ reduce using rule 19 (declParamList -> declParam SC .) ]

    declParam                      shift and go to state 16
    declParamList                  shift and go to state 69

state 41

    (28) declConstList -> declConst SC . declConstList
    (29) declConstList -> declConst SC .
    (28) declConstList -> . declConst SC declConstList
    (29) declConstList -> . declConst SC
    (30) declConst -> . CONST type NAME EQUAL funexp

  ! shift/reduce conflict for CONST resolved as shift
    REWARDS         reduce using rule 29 (declConstList -> declConst SC .)
    INIT            reduce using rule 29 (declConstList -> declConst SC .)
    PARAM           reduce using rule 29 (declConstList -> declConst SC .)
    GLOBALL         reduce using rule 29 (declConstList -> declConst SC .)
    LABEL           reduce using rule 29 (declConstList -> declConst SC .)
    FORMULA         reduce using rule 29 (declConstList -> declConst SC .)
    MODULE          reduce using rule 29 (declConstList -> declConst SC .)
    $end            reduce using rule 29 (declConstList -> declConst SC .)
    CONST           shift and go to state 25

  ! CONST           [ reduce using rule 29 (declConstList -> declConst SC .) ]

    declConst                      shift and go to state 17
    declConstList                  shift and go to state 70

state 42

    (31) declGlobalList -> declGlobal SC . declGlobalList
    (32) declGlobalList -> declGlobal SC .
    (31) declGlobalList -> . declGlobal SC declGlobalList
    (32) declGlobalList -> . declGlobal SC
    (33) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (34) declGlobal -> . GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
    (35) declGlobal -> . GLOBALL NAME DDOT BOOL

  ! shift/reduce conflict for GLOBALL resolved as shift
    REWARDS         reduce using rule 32 (declGlobalList -> declGlobal SC .)
    INIT            reduce using rule 32 (declGlobalList -> declGlobal SC .)
    PARAM           reduce using rule 32 (declGlobalList -> declGlobal SC .)
    CONST           reduce using rule 32 (declGlobalList -> declGlobal SC .)
    LABEL           reduce using rule 32 (declGlobalList -> declGlobal SC .)
    FORMULA         reduce using rule 32 (declGlobalList -> declGlobal SC .)
    MODULE          reduce using rule 32 (declGlobalList -> declGlobal SC .)
    $end            reduce using rule 32 (declGlobalList -> declGlobal SC .)
    GLOBALL         shift and go to state 26

  ! GLOBALL         [ reduce using rule 32 (declGlobalList -> declGlobal SC .) ]

    declGlobal                     shift and go to state 18
    declGlobalList                 shift and go to state 71

state 43

    (36) moduleList -> module moduleList .

    REWARDS         reduce using rule 36 (moduleList -> module moduleList .)
    INIT            reduce using rule 36 (moduleList -> module moduleList .)
    PARAM           reduce using rule 36 (moduleList -> module moduleList .)
    CONST           reduce using rule 36 (moduleList -> module moduleList .)
    GLOBALL         reduce using rule 36 (moduleList -> module moduleList .)
    LABEL           reduce using rule 36 (moduleList -> module moduleList .)
    FORMULA         reduce using rule 36 (moduleList -> module moduleList .)
    MODULE          reduce using rule 36 (moduleList -> module moduleList .)
    $end            reduce using rule 36 (moduleList -> module moduleList .)


state 44

    (60) labelList -> label SC . labelList
    (61) labelList -> label SC .
    (60) labelList -> . label SC labelList
    (61) labelList -> . label SC
    (62) label -> . LABEL QUOTE NAME QUOTE EQUAL listCond

  ! shift/reduce conflict for LABEL resolved as shift
    REWARDS         reduce using rule 61 (labelList -> label SC .)
    INIT            reduce using rule 61 (labelList -> label SC .)
    PARAM           reduce using rule 61 (labelList -> label SC .)
    CONST           reduce using rule 61 (labelList -> label SC .)
    GLOBALL         reduce using rule 61 (labelList -> label SC .)
    FORMULA         reduce using rule 61 (labelList -> label SC .)
    MODULE          reduce using rule 61 (labelList -> label SC .)
    $end            reduce using rule 61 (labelList -> label SC .)
    LABEL           shift and go to state 29

  ! LABEL           [ reduce using rule 61 (labelList -> label SC .) ]

    label                          shift and go to state 20
    labelList                      shift and go to state 72

state 45

    (65) rewards -> REWARDS rew . ENDREWARDS rewards
    (66) rewards -> REWARDS rew . ENDREWARDS

    ENDREWARDS      shift and go to state 73


state 46

    (67) rew -> QUOTE . NAME QUOTE funexp DDOT funexp SC rew

    NAME            shift and go to state 74


state 47

    (68) rew -> LCROCHET . NAME RCROCHET funexp DDOT funexp SC rew
    (69) rew -> LCROCHET . RCROCHET funexp DDOT funexp SC rew

    NAME            shift and go to state 75
    RCROCHET        shift and go to state 76


state 48

    (70) rew -> empty .

    ENDREWARDS      reduce using rule 70 (rew -> empty .)


state 49

    (71) initdef -> INIT initlist . ENDINIT

    ENDINIT         shift and go to state 77


state 50

    (72) initlist -> ainit .
    (73) initlist -> ainit . AND initlist

    ENDINIT         reduce using rule 72 (initlist -> ainit .)
    AND             shift and go to state 78


state 51

    (74) ainit -> NAME . EQUAL funexp

    EQUAL           shift and go to state 79


state 52

    (12) formulas -> formula SC . formulas
    (12) formulas -> . formula SC formulas
    (13) formulas -> . empty
    (14) formula -> . FORMULA NAME EQUAL funexp
    (1) empty -> .

  ! shift/reduce conflict for FORMULA resolved as shift
    FORMULA         shift and go to state 30
    REWARDS         reduce using rule 1 (empty -> .)
    INIT            reduce using rule 1 (empty -> .)
    PARAM           reduce using rule 1 (empty -> .)
    CONST           reduce using rule 1 (empty -> .)
    GLOBALL         reduce using rule 1 (empty -> .)
    LABEL           reduce using rule 1 (empty -> .)
    MODULE          reduce using rule 1 (empty -> .)
    $end            reduce using rule 1 (empty -> .)

  ! FORMULA         [ reduce using rule 1 (empty -> .) ]

    formula                        shift and go to state 23
    formulas                       shift and go to state 80
    empty                          shift and go to state 81

state 53

    (20) declParam -> PARAM type . NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (21) declParam -> PARAM type . NAME
    (22) declParam -> PARAM type . NAME LACCO funexp POINTPOINT funexp RACCO

    NAME            shift and go to state 82


state 54

    (23) type -> empty .

    NAME            reduce using rule 23 (type -> empty .)


state 55

    (24) type -> INT .

    NAME            reduce using rule 24 (type -> INT .)


state 56

    (25) type -> TYPEFLOAT .

    NAME            reduce using rule 25 (type -> TYPEFLOAT .)


state 57

    (26) type -> BOOL .

    NAME            reduce using rule 26 (type -> BOOL .)


state 58

    (27) type -> DOUBLE .

    NAME            reduce using rule 27 (type -> DOUBLE .)


state 59

    (30) declConst -> CONST type . NAME EQUAL funexp

    NAME            shift and go to state 83


state 60

    (33) declGlobal -> GLOBALL NAME . DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (34) declGlobal -> GLOBALL NAME . DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
    (35) declGlobal -> GLOBALL NAME . DDOT BOOL

    DDOT            shift and go to state 84


state 61

    (38) module -> modName stateList . transList endmodule
    (50) transList -> . trans SC transList
    (51) transList -> . empty
    (52) trans -> . LCROCHET RCROCHET funexp FLECHE updatesProb
    (53) trans -> . LCROCHET NAME RCROCHET funexp FLECHE updatesProb
    (1) empty -> .

    LCROCHET        shift and go to state 88
    ENDMODULE       reduce using rule 1 (empty -> .)

    transList                      shift and go to state 85
    trans                          shift and go to state 86
    empty                          shift and go to state 87

state 62

    (45) stateList -> stateDecl . SC stateList

    SC              shift and go to state 89


state 63

    (46) stateList -> empty .

    LCROCHET        reduce using rule 46 (stateList -> empty .)
    ENDMODULE       reduce using rule 46 (stateList -> empty .)


state 64

    (47) stateDecl -> NAME . DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (48) stateDecl -> NAME . DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
    (49) stateDecl -> NAME . DDOT BOOL

    DDOT            shift and go to state 90


state 65

    (39) module -> reModName LCROCHET . listIdState RCROCHET endmodule
    (42) listIdState -> . NAME EQUAL NAME
    (43) listIdState -> . NAME EQUAL NAME VIRGULE listIdState

    NAME            shift and go to state 92

    listIdState                    shift and go to state 91

state 66

    (62) label -> LABEL QUOTE . NAME QUOTE EQUAL listCond

    NAME            shift and go to state 93


state 67

    (14) formula -> FORMULA NAME . EQUAL funexp

    EQUAL           shift and go to state 94


state 68

    (40) modName -> MODULE NAME .
    (41) reModName -> MODULE NAME . EQUAL NAME

    NAME            reduce using rule 40 (modName -> MODULE NAME .)
    LCROCHET        reduce using rule 40 (modName -> MODULE NAME .)
    ENDMODULE       reduce using rule 40 (modName -> MODULE NAME .)
    EQUAL           shift and go to state 95


state 69

    (18) declParamList -> declParam SC declParamList .

    REWARDS         reduce using rule 18 (declParamList -> declParam SC declParamList .)
    INIT            reduce using rule 18 (declParamList -> declParam SC declParamList .)
    PARAM           reduce using rule 18 (declParamList -> declParam SC declParamList .)
    CONST           reduce using rule 18 (declParamList -> declParam SC declParamList .)
    GLOBALL         reduce using rule 18 (declParamList -> declParam SC declParamList .)
    LABEL           reduce using rule 18 (declParamList -> declParam SC declParamList .)
    FORMULA         reduce using rule 18 (declParamList -> declParam SC declParamList .)
    MODULE          reduce using rule 18 (declParamList -> declParam SC declParamList .)
    $end            reduce using rule 18 (declParamList -> declParam SC declParamList .)


state 70

    (28) declConstList -> declConst SC declConstList .

    REWARDS         reduce using rule 28 (declConstList -> declConst SC declConstList .)
    INIT            reduce using rule 28 (declConstList -> declConst SC declConstList .)
    PARAM           reduce using rule 28 (declConstList -> declConst SC declConstList .)
    CONST           reduce using rule 28 (declConstList -> declConst SC declConstList .)
    GLOBALL         reduce using rule 28 (declConstList -> declConst SC declConstList .)
    LABEL           reduce using rule 28 (declConstList -> declConst SC declConstList .)
    FORMULA         reduce using rule 28 (declConstList -> declConst SC declConstList .)
    MODULE          reduce using rule 28 (declConstList -> declConst SC declConstList .)
    $end            reduce using rule 28 (declConstList -> declConst SC declConstList .)


state 71

    (31) declGlobalList -> declGlobal SC declGlobalList .

    REWARDS         reduce using rule 31 (declGlobalList -> declGlobal SC declGlobalList .)
    INIT            reduce using rule 31 (declGlobalList -> declGlobal SC declGlobalList .)
    PARAM           reduce using rule 31 (declGlobalList -> declGlobal SC declGlobalList .)
    CONST           reduce using rule 31 (declGlobalList -> declGlobal SC declGlobalList .)
    GLOBALL         reduce using rule 31 (declGlobalList -> declGlobal SC declGlobalList .)
    LABEL           reduce using rule 31 (declGlobalList -> declGlobal SC declGlobalList .)
    FORMULA         reduce using rule 31 (declGlobalList -> declGlobal SC declGlobalList .)
    MODULE          reduce using rule 31 (declGlobalList -> declGlobal SC declGlobalList .)
    $end            reduce using rule 31 (declGlobalList -> declGlobal SC declGlobalList .)


state 72

    (60) labelList -> label SC labelList .

    REWARDS         reduce using rule 60 (labelList -> label SC labelList .)
    INIT            reduce using rule 60 (labelList -> label SC labelList .)
    PARAM           reduce using rule 60 (labelList -> label SC labelList .)
    CONST           reduce using rule 60 (labelList -> label SC labelList .)
    GLOBALL         reduce using rule 60 (labelList -> label SC labelList .)
    LABEL           reduce using rule 60 (labelList -> label SC labelList .)
    FORMULA         reduce using rule 60 (labelList -> label SC labelList .)
    MODULE          reduce using rule 60 (labelList -> label SC labelList .)
    $end            reduce using rule 60 (labelList -> label SC labelList .)


state 73

    (65) rewards -> REWARDS rew ENDREWARDS . rewards
    (66) rewards -> REWARDS rew ENDREWARDS .
    (65) rewards -> . REWARDS rew ENDREWARDS rewards
    (66) rewards -> . REWARDS rew ENDREWARDS

  ! shift/reduce conflict for REWARDS resolved as shift
    INIT            reduce using rule 66 (rewards -> REWARDS rew ENDREWARDS .)
    PARAM           reduce using rule 66 (rewards -> REWARDS rew ENDREWARDS .)
    CONST           reduce using rule 66 (rewards -> REWARDS rew ENDREWARDS .)
    GLOBALL         reduce using rule 66 (rewards -> REWARDS rew ENDREWARDS .)
    LABEL           reduce using rule 66 (rewards -> REWARDS rew ENDREWARDS .)
    FORMULA         reduce using rule 66 (rewards -> REWARDS rew ENDREWARDS .)
    MODULE          reduce using rule 66 (rewards -> REWARDS rew ENDREWARDS .)
    $end            reduce using rule 66 (rewards -> REWARDS rew ENDREWARDS .)
    REWARDS         shift and go to state 21

  ! REWARDS         [ reduce using rule 66 (rewards -> REWARDS rew ENDREWARDS .) ]

    rewards                        shift and go to state 96

state 74

    (67) rew -> QUOTE NAME . QUOTE funexp DDOT funexp SC rew

    QUOTE           shift and go to state 97


state 75

    (68) rew -> LCROCHET NAME . RCROCHET funexp DDOT funexp SC rew

    RCROCHET        shift and go to state 98


state 76

    (69) rew -> LCROCHET RCROCHET . funexp DDOT funexp SC rew
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 99

state 77

    (71) initdef -> INIT initlist ENDINIT .

    REWARDS         reduce using rule 71 (initdef -> INIT initlist ENDINIT .)
    INIT            reduce using rule 71 (initdef -> INIT initlist ENDINIT .)
    PARAM           reduce using rule 71 (initdef -> INIT initlist ENDINIT .)
    CONST           reduce using rule 71 (initdef -> INIT initlist ENDINIT .)
    GLOBALL         reduce using rule 71 (initdef -> INIT initlist ENDINIT .)
    LABEL           reduce using rule 71 (initdef -> INIT initlist ENDINIT .)
    FORMULA         reduce using rule 71 (initdef -> INIT initlist ENDINIT .)
    MODULE          reduce using rule 71 (initdef -> INIT initlist ENDINIT .)
    $end            reduce using rule 71 (initdef -> INIT initlist ENDINIT .)


state 78

    (73) initlist -> ainit AND . initlist
    (72) initlist -> . ainit
    (73) initlist -> . ainit AND initlist
    (74) ainit -> . NAME EQUAL funexp

    NAME            shift and go to state 51

    ainit                          shift and go to state 50
    initlist                       shift and go to state 107

state 79

    (74) ainit -> NAME EQUAL . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 108

state 80

    (12) formulas -> formula SC formulas .

    REWARDS         reduce using rule 12 (formulas -> formula SC formulas .)
    INIT            reduce using rule 12 (formulas -> formula SC formulas .)
    PARAM           reduce using rule 12 (formulas -> formula SC formulas .)
    CONST           reduce using rule 12 (formulas -> formula SC formulas .)
    GLOBALL         reduce using rule 12 (formulas -> formula SC formulas .)
    LABEL           reduce using rule 12 (formulas -> formula SC formulas .)
    FORMULA         reduce using rule 12 (formulas -> formula SC formulas .)
    MODULE          reduce using rule 12 (formulas -> formula SC formulas .)
    $end            reduce using rule 12 (formulas -> formula SC formulas .)


state 81

    (13) formulas -> empty .

    REWARDS         reduce using rule 13 (formulas -> empty .)
    INIT            reduce using rule 13 (formulas -> empty .)
    PARAM           reduce using rule 13 (formulas -> empty .)
    CONST           reduce using rule 13 (formulas -> empty .)
    GLOBALL         reduce using rule 13 (formulas -> empty .)
    LABEL           reduce using rule 13 (formulas -> empty .)
    FORMULA         reduce using rule 13 (formulas -> empty .)
    MODULE          reduce using rule 13 (formulas -> empty .)
    $end            reduce using rule 13 (formulas -> empty .)


state 82

    (20) declParam -> PARAM type NAME . DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (21) declParam -> PARAM type NAME .
    (22) declParam -> PARAM type NAME . LACCO funexp POINTPOINT funexp RACCO

    DDOT            shift and go to state 109
    SC              reduce using rule 21 (declParam -> PARAM type NAME .)
    LACCO           shift and go to state 110


state 83

    (30) declConst -> CONST type NAME . EQUAL funexp

    EQUAL           shift and go to state 111


state 84

    (33) declGlobal -> GLOBALL NAME DDOT . LCROCHET funexp POINTPOINT funexp RCROCHET
    (34) declGlobal -> GLOBALL NAME DDOT . LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
    (35) declGlobal -> GLOBALL NAME DDOT . BOOL

    LCROCHET        shift and go to state 112
    BOOL            shift and go to state 113


state 85

    (38) module -> modName stateList transList . endmodule
    (44) endmodule -> . ENDMODULE

    ENDMODULE       shift and go to state 115

    endmodule                      shift and go to state 114

state 86

    (50) transList -> trans . SC transList

    SC              shift and go to state 116


state 87

    (51) transList -> empty .

    ENDMODULE       reduce using rule 51 (transList -> empty .)


state 88

    (52) trans -> LCROCHET . RCROCHET funexp FLECHE updatesProb
    (53) trans -> LCROCHET . NAME RCROCHET funexp FLECHE updatesProb

    RCROCHET        shift and go to state 117
    NAME            shift and go to state 118


state 89

    (45) stateList -> stateDecl SC . stateList
    (45) stateList -> . stateDecl SC stateList
    (46) stateList -> . empty
    (47) stateDecl -> . NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET
    (48) stateDecl -> . NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
    (49) stateDecl -> . NAME DDOT BOOL
    (1) empty -> .

    NAME            shift and go to state 64
    LCROCHET        reduce using rule 1 (empty -> .)
    ENDMODULE       reduce using rule 1 (empty -> .)

    stateDecl                      shift and go to state 62
    stateList                      shift and go to state 119
    empty                          shift and go to state 63

state 90

    (47) stateDecl -> NAME DDOT . LCROCHET funexp POINTPOINT funexp RCROCHET
    (48) stateDecl -> NAME DDOT . LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp
    (49) stateDecl -> NAME DDOT . BOOL

    LCROCHET        shift and go to state 120
    BOOL            shift and go to state 121


state 91

    (39) module -> reModName LCROCHET listIdState . RCROCHET endmodule

    RCROCHET        shift and go to state 122


state 92

    (42) listIdState -> NAME . EQUAL NAME
    (43) listIdState -> NAME . EQUAL NAME VIRGULE listIdState

    EQUAL           shift and go to state 123


state 93

    (62) label -> LABEL QUOTE NAME . QUOTE EQUAL listCond

    QUOTE           shift and go to state 124


state 94

    (14) formula -> FORMULA NAME EQUAL . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 125

state 95

    (41) reModName -> MODULE NAME EQUAL . NAME

    NAME            shift and go to state 126


state 96

    (65) rewards -> REWARDS rew ENDREWARDS rewards .

    REWARDS         reduce using rule 65 (rewards -> REWARDS rew ENDREWARDS rewards .)
    INIT            reduce using rule 65 (rewards -> REWARDS rew ENDREWARDS rewards .)
    PARAM           reduce using rule 65 (rewards -> REWARDS rew ENDREWARDS rewards .)
    CONST           reduce using rule 65 (rewards -> REWARDS rew ENDREWARDS rewards .)
    GLOBALL         reduce using rule 65 (rewards -> REWARDS rew ENDREWARDS rewards .)
    LABEL           reduce using rule 65 (rewards -> REWARDS rew ENDREWARDS rewards .)
    FORMULA         reduce using rule 65 (rewards -> REWARDS rew ENDREWARDS rewards .)
    MODULE          reduce using rule 65 (rewards -> REWARDS rew ENDREWARDS rewards .)
    $end            reduce using rule 65 (rewards -> REWARDS rew ENDREWARDS rewards .)


state 97

    (67) rew -> QUOTE NAME QUOTE . funexp DDOT funexp SC rew
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 127

state 98

    (68) rew -> LCROCHET NAME RCROCHET . funexp DDOT funexp SC rew
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 128

state 99

    (69) rew -> LCROCHET RCROCHET funexp . DDOT funexp SC rew
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    DDOT            shift and go to state 129
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 100

    (88) funexp -> MINUS . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 141

state 101

    (86) funexp -> LPAR . funexp RPAR
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 142

state 102

    (87) funexp -> NOT . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 143

state 103

    (89) funexp -> FLOAT .

    DDOT            reduce using rule 89 (funexp -> FLOAT .)
    PLUS            reduce using rule 89 (funexp -> FLOAT .)
    MINUS           reduce using rule 89 (funexp -> FLOAT .)
    DIV             reduce using rule 89 (funexp -> FLOAT .)
    MULT            reduce using rule 89 (funexp -> FLOAT .)
    GEQ             reduce using rule 89 (funexp -> FLOAT .)
    GS              reduce using rule 89 (funexp -> FLOAT .)
    LS              reduce using rule 89 (funexp -> FLOAT .)
    LEQ             reduce using rule 89 (funexp -> FLOAT .)
    EQUAL           reduce using rule 89 (funexp -> FLOAT .)
    AND             reduce using rule 89 (funexp -> FLOAT .)
    OR              reduce using rule 89 (funexp -> FLOAT .)
    ENDINIT         reduce using rule 89 (funexp -> FLOAT .)
    SC              reduce using rule 89 (funexp -> FLOAT .)
    RPAR            reduce using rule 89 (funexp -> FLOAT .)
    POINTPOINT      reduce using rule 89 (funexp -> FLOAT .)
    FLECHE          reduce using rule 89 (funexp -> FLOAT .)
    RACCO           reduce using rule 89 (funexp -> FLOAT .)
    RCROCHET        reduce using rule 89 (funexp -> FLOAT .)


state 104

    (90) funexp -> TRUE .

    DDOT            reduce using rule 90 (funexp -> TRUE .)
    PLUS            reduce using rule 90 (funexp -> TRUE .)
    MINUS           reduce using rule 90 (funexp -> TRUE .)
    DIV             reduce using rule 90 (funexp -> TRUE .)
    MULT            reduce using rule 90 (funexp -> TRUE .)
    GEQ             reduce using rule 90 (funexp -> TRUE .)
    GS              reduce using rule 90 (funexp -> TRUE .)
    LS              reduce using rule 90 (funexp -> TRUE .)
    LEQ             reduce using rule 90 (funexp -> TRUE .)
    EQUAL           reduce using rule 90 (funexp -> TRUE .)
    AND             reduce using rule 90 (funexp -> TRUE .)
    OR              reduce using rule 90 (funexp -> TRUE .)
    ENDINIT         reduce using rule 90 (funexp -> TRUE .)
    SC              reduce using rule 90 (funexp -> TRUE .)
    RPAR            reduce using rule 90 (funexp -> TRUE .)
    POINTPOINT      reduce using rule 90 (funexp -> TRUE .)
    FLECHE          reduce using rule 90 (funexp -> TRUE .)
    RACCO           reduce using rule 90 (funexp -> TRUE .)
    RCROCHET        reduce using rule 90 (funexp -> TRUE .)


state 105

    (91) funexp -> FALSE .

    DDOT            reduce using rule 91 (funexp -> FALSE .)
    PLUS            reduce using rule 91 (funexp -> FALSE .)
    MINUS           reduce using rule 91 (funexp -> FALSE .)
    DIV             reduce using rule 91 (funexp -> FALSE .)
    MULT            reduce using rule 91 (funexp -> FALSE .)
    GEQ             reduce using rule 91 (funexp -> FALSE .)
    GS              reduce using rule 91 (funexp -> FALSE .)
    LS              reduce using rule 91 (funexp -> FALSE .)
    LEQ             reduce using rule 91 (funexp -> FALSE .)
    EQUAL           reduce using rule 91 (funexp -> FALSE .)
    AND             reduce using rule 91 (funexp -> FALSE .)
    OR              reduce using rule 91 (funexp -> FALSE .)
    ENDINIT         reduce using rule 91 (funexp -> FALSE .)
    SC              reduce using rule 91 (funexp -> FALSE .)
    RPAR            reduce using rule 91 (funexp -> FALSE .)
    POINTPOINT      reduce using rule 91 (funexp -> FALSE .)
    FLECHE          reduce using rule 91 (funexp -> FALSE .)
    RACCO           reduce using rule 91 (funexp -> FALSE .)
    RCROCHET        reduce using rule 91 (funexp -> FALSE .)


state 106

    (92) funexp -> NAME .
    (93) funexp -> NAME . LACCO funexp RACCO

    DDOT            reduce using rule 92 (funexp -> NAME .)
    PLUS            reduce using rule 92 (funexp -> NAME .)
    MINUS           reduce using rule 92 (funexp -> NAME .)
    DIV             reduce using rule 92 (funexp -> NAME .)
    MULT            reduce using rule 92 (funexp -> NAME .)
    GEQ             reduce using rule 92 (funexp -> NAME .)
    GS              reduce using rule 92 (funexp -> NAME .)
    LS              reduce using rule 92 (funexp -> NAME .)
    LEQ             reduce using rule 92 (funexp -> NAME .)
    EQUAL           reduce using rule 92 (funexp -> NAME .)
    AND             reduce using rule 92 (funexp -> NAME .)
    OR              reduce using rule 92 (funexp -> NAME .)
    ENDINIT         reduce using rule 92 (funexp -> NAME .)
    SC              reduce using rule 92 (funexp -> NAME .)
    RPAR            reduce using rule 92 (funexp -> NAME .)
    POINTPOINT      reduce using rule 92 (funexp -> NAME .)
    FLECHE          reduce using rule 92 (funexp -> NAME .)
    RACCO           reduce using rule 92 (funexp -> NAME .)
    RCROCHET        reduce using rule 92 (funexp -> NAME .)
    LACCO           shift and go to state 144


state 107

    (73) initlist -> ainit AND initlist .

    ENDINIT         reduce using rule 73 (initlist -> ainit AND initlist .)


state 108

    (74) ainit -> NAME EQUAL funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    AND             reduce using rule 74 (ainit -> NAME EQUAL funexp .)
    ENDINIT         reduce using rule 74 (ainit -> NAME EQUAL funexp .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    OR              shift and go to state 140

  ! AND             [ shift and go to state 139 ]


state 109

    (20) declParam -> PARAM type NAME DDOT . LCROCHET funexp POINTPOINT funexp RCROCHET

    LCROCHET        shift and go to state 145


state 110

    (22) declParam -> PARAM type NAME LACCO . funexp POINTPOINT funexp RACCO
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 146

state 111

    (30) declConst -> CONST type NAME EQUAL . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 147

state 112

    (33) declGlobal -> GLOBALL NAME DDOT LCROCHET . funexp POINTPOINT funexp RCROCHET
    (34) declGlobal -> GLOBALL NAME DDOT LCROCHET . funexp POINTPOINT funexp RCROCHET INIT funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 148

state 113

    (35) declGlobal -> GLOBALL NAME DDOT BOOL .

    SC              reduce using rule 35 (declGlobal -> GLOBALL NAME DDOT BOOL .)


state 114

    (38) module -> modName stateList transList endmodule .

    MODULE          reduce using rule 38 (module -> modName stateList transList endmodule .)
    REWARDS         reduce using rule 38 (module -> modName stateList transList endmodule .)
    INIT            reduce using rule 38 (module -> modName stateList transList endmodule .)
    PARAM           reduce using rule 38 (module -> modName stateList transList endmodule .)
    CONST           reduce using rule 38 (module -> modName stateList transList endmodule .)
    GLOBALL         reduce using rule 38 (module -> modName stateList transList endmodule .)
    LABEL           reduce using rule 38 (module -> modName stateList transList endmodule .)
    FORMULA         reduce using rule 38 (module -> modName stateList transList endmodule .)
    $end            reduce using rule 38 (module -> modName stateList transList endmodule .)


state 115

    (44) endmodule -> ENDMODULE .

    MODULE          reduce using rule 44 (endmodule -> ENDMODULE .)
    REWARDS         reduce using rule 44 (endmodule -> ENDMODULE .)
    INIT            reduce using rule 44 (endmodule -> ENDMODULE .)
    PARAM           reduce using rule 44 (endmodule -> ENDMODULE .)
    CONST           reduce using rule 44 (endmodule -> ENDMODULE .)
    GLOBALL         reduce using rule 44 (endmodule -> ENDMODULE .)
    LABEL           reduce using rule 44 (endmodule -> ENDMODULE .)
    FORMULA         reduce using rule 44 (endmodule -> ENDMODULE .)
    $end            reduce using rule 44 (endmodule -> ENDMODULE .)


state 116

    (50) transList -> trans SC . transList
    (50) transList -> . trans SC transList
    (51) transList -> . empty
    (52) trans -> . LCROCHET RCROCHET funexp FLECHE updatesProb
    (53) trans -> . LCROCHET NAME RCROCHET funexp FLECHE updatesProb
    (1) empty -> .

    LCROCHET        shift and go to state 88
    ENDMODULE       reduce using rule 1 (empty -> .)

    trans                          shift and go to state 86
    transList                      shift and go to state 149
    empty                          shift and go to state 87

state 117

    (52) trans -> LCROCHET RCROCHET . funexp FLECHE updatesProb
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 150

state 118

    (53) trans -> LCROCHET NAME . RCROCHET funexp FLECHE updatesProb

    RCROCHET        shift and go to state 151


state 119

    (45) stateList -> stateDecl SC stateList .

    LCROCHET        reduce using rule 45 (stateList -> stateDecl SC stateList .)
    ENDMODULE       reduce using rule 45 (stateList -> stateDecl SC stateList .)


state 120

    (47) stateDecl -> NAME DDOT LCROCHET . funexp POINTPOINT funexp RCROCHET
    (48) stateDecl -> NAME DDOT LCROCHET . funexp POINTPOINT funexp RCROCHET INIT funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 152

state 121

    (49) stateDecl -> NAME DDOT BOOL .

    SC              reduce using rule 49 (stateDecl -> NAME DDOT BOOL .)


state 122

    (39) module -> reModName LCROCHET listIdState RCROCHET . endmodule
    (44) endmodule -> . ENDMODULE

    ENDMODULE       shift and go to state 115

    endmodule                      shift and go to state 153

state 123

    (42) listIdState -> NAME EQUAL . NAME
    (43) listIdState -> NAME EQUAL . NAME VIRGULE listIdState

    NAME            shift and go to state 154


state 124

    (62) label -> LABEL QUOTE NAME QUOTE . EQUAL listCond

    EQUAL           shift and go to state 155


state 125

    (14) formula -> FORMULA NAME EQUAL funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    SC              reduce using rule 14 (formula -> FORMULA NAME EQUAL funexp .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 126

    (41) reModName -> MODULE NAME EQUAL NAME .

    LCROCHET        reduce using rule 41 (reModName -> MODULE NAME EQUAL NAME .)


state 127

    (67) rew -> QUOTE NAME QUOTE funexp . DDOT funexp SC rew
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    DDOT            shift and go to state 156
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 128

    (68) rew -> LCROCHET NAME RCROCHET funexp . DDOT funexp SC rew
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    DDOT            shift and go to state 157
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 129

    (69) rew -> LCROCHET RCROCHET funexp DDOT . funexp SC rew
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 158

state 130

    (75) funexp -> funexp PLUS . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 159

state 131

    (76) funexp -> funexp MINUS . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 160

state 132

    (77) funexp -> funexp DIV . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 161

state 133

    (78) funexp -> funexp MULT . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 162

state 134

    (79) funexp -> funexp GEQ . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 163

state 135

    (80) funexp -> funexp GS . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 164

state 136

    (81) funexp -> funexp LS . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 165

state 137

    (82) funexp -> funexp LEQ . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 166

state 138

    (83) funexp -> funexp EQUAL . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 167

state 139

    (84) funexp -> funexp AND . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 168

state 140

    (85) funexp -> funexp OR . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 169

state 141

    (88) funexp -> MINUS funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    DDOT            reduce using rule 88 (funexp -> MINUS funexp .)
    PLUS            reduce using rule 88 (funexp -> MINUS funexp .)
    MINUS           reduce using rule 88 (funexp -> MINUS funexp .)
    GEQ             reduce using rule 88 (funexp -> MINUS funexp .)
    GS              reduce using rule 88 (funexp -> MINUS funexp .)
    LS              reduce using rule 88 (funexp -> MINUS funexp .)
    LEQ             reduce using rule 88 (funexp -> MINUS funexp .)
    EQUAL           reduce using rule 88 (funexp -> MINUS funexp .)
    AND             reduce using rule 88 (funexp -> MINUS funexp .)
    OR              reduce using rule 88 (funexp -> MINUS funexp .)
    ENDINIT         reduce using rule 88 (funexp -> MINUS funexp .)
    SC              reduce using rule 88 (funexp -> MINUS funexp .)
    RPAR            reduce using rule 88 (funexp -> MINUS funexp .)
    POINTPOINT      reduce using rule 88 (funexp -> MINUS funexp .)
    FLECHE          reduce using rule 88 (funexp -> MINUS funexp .)
    RACCO           reduce using rule 88 (funexp -> MINUS funexp .)
    RCROCHET        reduce using rule 88 (funexp -> MINUS funexp .)
    DIV             shift and go to state 132
    MULT            shift and go to state 133

  ! DIV             [ reduce using rule 88 (funexp -> MINUS funexp .) ]
  ! MULT            [ reduce using rule 88 (funexp -> MINUS funexp .) ]
  ! PLUS            [ shift and go to state 130 ]
  ! MINUS           [ shift and go to state 131 ]
  ! GEQ             [ shift and go to state 134 ]
  ! GS              [ shift and go to state 135 ]
  ! LS              [ shift and go to state 136 ]
  ! LEQ             [ shift and go to state 137 ]
  ! EQUAL           [ shift and go to state 138 ]
  ! AND             [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]


state 142

    (86) funexp -> LPAR funexp . RPAR
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    RPAR            shift and go to state 170
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 143

    (87) funexp -> NOT funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    DDOT            reduce using rule 87 (funexp -> NOT funexp .)
    PLUS            reduce using rule 87 (funexp -> NOT funexp .)
    MINUS           reduce using rule 87 (funexp -> NOT funexp .)
    DIV             reduce using rule 87 (funexp -> NOT funexp .)
    MULT            reduce using rule 87 (funexp -> NOT funexp .)
    GEQ             reduce using rule 87 (funexp -> NOT funexp .)
    GS              reduce using rule 87 (funexp -> NOT funexp .)
    LS              reduce using rule 87 (funexp -> NOT funexp .)
    LEQ             reduce using rule 87 (funexp -> NOT funexp .)
    EQUAL           reduce using rule 87 (funexp -> NOT funexp .)
    AND             reduce using rule 87 (funexp -> NOT funexp .)
    OR              reduce using rule 87 (funexp -> NOT funexp .)
    ENDINIT         reduce using rule 87 (funexp -> NOT funexp .)
    SC              reduce using rule 87 (funexp -> NOT funexp .)
    RPAR            reduce using rule 87 (funexp -> NOT funexp .)
    POINTPOINT      reduce using rule 87 (funexp -> NOT funexp .)
    FLECHE          reduce using rule 87 (funexp -> NOT funexp .)
    RACCO           reduce using rule 87 (funexp -> NOT funexp .)
    RCROCHET        reduce using rule 87 (funexp -> NOT funexp .)

  ! PLUS            [ shift and go to state 130 ]
  ! MINUS           [ shift and go to state 131 ]
  ! DIV             [ shift and go to state 132 ]
  ! MULT            [ shift and go to state 133 ]
  ! GEQ             [ shift and go to state 134 ]
  ! GS              [ shift and go to state 135 ]
  ! LS              [ shift and go to state 136 ]
  ! LEQ             [ shift and go to state 137 ]
  ! EQUAL           [ shift and go to state 138 ]
  ! AND             [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]


state 144

    (93) funexp -> NAME LACCO . funexp RACCO
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 171

state 145

    (20) declParam -> PARAM type NAME DDOT LCROCHET . funexp POINTPOINT funexp RCROCHET
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 172

state 146

    (22) declParam -> PARAM type NAME LACCO funexp . POINTPOINT funexp RACCO
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    POINTPOINT      shift and go to state 173
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 147

    (30) declConst -> CONST type NAME EQUAL funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    SC              reduce using rule 30 (declConst -> CONST type NAME EQUAL funexp .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 148

    (33) declGlobal -> GLOBALL NAME DDOT LCROCHET funexp . POINTPOINT funexp RCROCHET
    (34) declGlobal -> GLOBALL NAME DDOT LCROCHET funexp . POINTPOINT funexp RCROCHET INIT funexp
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    POINTPOINT      shift and go to state 174
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 149

    (50) transList -> trans SC transList .

    ENDMODULE       reduce using rule 50 (transList -> trans SC transList .)


state 150

    (52) trans -> LCROCHET RCROCHET funexp . FLECHE updatesProb
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    FLECHE          shift and go to state 175
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 151

    (53) trans -> LCROCHET NAME RCROCHET . funexp FLECHE updatesProb
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 176

state 152

    (47) stateDecl -> NAME DDOT LCROCHET funexp . POINTPOINT funexp RCROCHET
    (48) stateDecl -> NAME DDOT LCROCHET funexp . POINTPOINT funexp RCROCHET INIT funexp
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    POINTPOINT      shift and go to state 177
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 153

    (39) module -> reModName LCROCHET listIdState RCROCHET endmodule .

    MODULE          reduce using rule 39 (module -> reModName LCROCHET listIdState RCROCHET endmodule .)
    REWARDS         reduce using rule 39 (module -> reModName LCROCHET listIdState RCROCHET endmodule .)
    INIT            reduce using rule 39 (module -> reModName LCROCHET listIdState RCROCHET endmodule .)
    PARAM           reduce using rule 39 (module -> reModName LCROCHET listIdState RCROCHET endmodule .)
    CONST           reduce using rule 39 (module -> reModName LCROCHET listIdState RCROCHET endmodule .)
    GLOBALL         reduce using rule 39 (module -> reModName LCROCHET listIdState RCROCHET endmodule .)
    LABEL           reduce using rule 39 (module -> reModName LCROCHET listIdState RCROCHET endmodule .)
    FORMULA         reduce using rule 39 (module -> reModName LCROCHET listIdState RCROCHET endmodule .)
    $end            reduce using rule 39 (module -> reModName LCROCHET listIdState RCROCHET endmodule .)


state 154

    (42) listIdState -> NAME EQUAL NAME .
    (43) listIdState -> NAME EQUAL NAME . VIRGULE listIdState

    RCROCHET        reduce using rule 42 (listIdState -> NAME EQUAL NAME .)
    VIRGULE         shift and go to state 178


state 155

    (62) label -> LABEL QUOTE NAME QUOTE EQUAL . listCond
    (63) listCond -> . NAME EQUAL funexp AND listCond
    (64) listCond -> . NAME EQUAL funexp

    NAME            shift and go to state 179

    listCond                       shift and go to state 180

state 156

    (67) rew -> QUOTE NAME QUOTE funexp DDOT . funexp SC rew
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 181

state 157

    (68) rew -> LCROCHET NAME RCROCHET funexp DDOT . funexp SC rew
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 182

state 158

    (69) rew -> LCROCHET RCROCHET funexp DDOT funexp . SC rew
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    SC              shift and go to state 183
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 159

    (75) funexp -> funexp PLUS funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    DDOT            reduce using rule 75 (funexp -> funexp PLUS funexp .)
    PLUS            reduce using rule 75 (funexp -> funexp PLUS funexp .)
    MINUS           reduce using rule 75 (funexp -> funexp PLUS funexp .)
    GEQ             reduce using rule 75 (funexp -> funexp PLUS funexp .)
    GS              reduce using rule 75 (funexp -> funexp PLUS funexp .)
    LS              reduce using rule 75 (funexp -> funexp PLUS funexp .)
    LEQ             reduce using rule 75 (funexp -> funexp PLUS funexp .)
    EQUAL           reduce using rule 75 (funexp -> funexp PLUS funexp .)
    AND             reduce using rule 75 (funexp -> funexp PLUS funexp .)
    OR              reduce using rule 75 (funexp -> funexp PLUS funexp .)
    ENDINIT         reduce using rule 75 (funexp -> funexp PLUS funexp .)
    SC              reduce using rule 75 (funexp -> funexp PLUS funexp .)
    RPAR            reduce using rule 75 (funexp -> funexp PLUS funexp .)
    POINTPOINT      reduce using rule 75 (funexp -> funexp PLUS funexp .)
    FLECHE          reduce using rule 75 (funexp -> funexp PLUS funexp .)
    RACCO           reduce using rule 75 (funexp -> funexp PLUS funexp .)
    RCROCHET        reduce using rule 75 (funexp -> funexp PLUS funexp .)
    DIV             shift and go to state 132
    MULT            shift and go to state 133

  ! DIV             [ reduce using rule 75 (funexp -> funexp PLUS funexp .) ]
  ! MULT            [ reduce using rule 75 (funexp -> funexp PLUS funexp .) ]
  ! PLUS            [ shift and go to state 130 ]
  ! MINUS           [ shift and go to state 131 ]
  ! GEQ             [ shift and go to state 134 ]
  ! GS              [ shift and go to state 135 ]
  ! LS              [ shift and go to state 136 ]
  ! LEQ             [ shift and go to state 137 ]
  ! EQUAL           [ shift and go to state 138 ]
  ! AND             [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]


state 160

    (76) funexp -> funexp MINUS funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    DDOT            reduce using rule 76 (funexp -> funexp MINUS funexp .)
    PLUS            reduce using rule 76 (funexp -> funexp MINUS funexp .)
    MINUS           reduce using rule 76 (funexp -> funexp MINUS funexp .)
    GEQ             reduce using rule 76 (funexp -> funexp MINUS funexp .)
    GS              reduce using rule 76 (funexp -> funexp MINUS funexp .)
    LS              reduce using rule 76 (funexp -> funexp MINUS funexp .)
    LEQ             reduce using rule 76 (funexp -> funexp MINUS funexp .)
    EQUAL           reduce using rule 76 (funexp -> funexp MINUS funexp .)
    AND             reduce using rule 76 (funexp -> funexp MINUS funexp .)
    OR              reduce using rule 76 (funexp -> funexp MINUS funexp .)
    ENDINIT         reduce using rule 76 (funexp -> funexp MINUS funexp .)
    SC              reduce using rule 76 (funexp -> funexp MINUS funexp .)
    RPAR            reduce using rule 76 (funexp -> funexp MINUS funexp .)
    POINTPOINT      reduce using rule 76 (funexp -> funexp MINUS funexp .)
    FLECHE          reduce using rule 76 (funexp -> funexp MINUS funexp .)
    RACCO           reduce using rule 76 (funexp -> funexp MINUS funexp .)
    RCROCHET        reduce using rule 76 (funexp -> funexp MINUS funexp .)
    DIV             shift and go to state 132
    MULT            shift and go to state 133

  ! DIV             [ reduce using rule 76 (funexp -> funexp MINUS funexp .) ]
  ! MULT            [ reduce using rule 76 (funexp -> funexp MINUS funexp .) ]
  ! PLUS            [ shift and go to state 130 ]
  ! MINUS           [ shift and go to state 131 ]
  ! GEQ             [ shift and go to state 134 ]
  ! GS              [ shift and go to state 135 ]
  ! LS              [ shift and go to state 136 ]
  ! LEQ             [ shift and go to state 137 ]
  ! EQUAL           [ shift and go to state 138 ]
  ! AND             [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]


state 161

    (77) funexp -> funexp DIV funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    DDOT            reduce using rule 77 (funexp -> funexp DIV funexp .)
    PLUS            reduce using rule 77 (funexp -> funexp DIV funexp .)
    MINUS           reduce using rule 77 (funexp -> funexp DIV funexp .)
    DIV             reduce using rule 77 (funexp -> funexp DIV funexp .)
    MULT            reduce using rule 77 (funexp -> funexp DIV funexp .)
    GEQ             reduce using rule 77 (funexp -> funexp DIV funexp .)
    GS              reduce using rule 77 (funexp -> funexp DIV funexp .)
    LS              reduce using rule 77 (funexp -> funexp DIV funexp .)
    LEQ             reduce using rule 77 (funexp -> funexp DIV funexp .)
    EQUAL           reduce using rule 77 (funexp -> funexp DIV funexp .)
    AND             reduce using rule 77 (funexp -> funexp DIV funexp .)
    OR              reduce using rule 77 (funexp -> funexp DIV funexp .)
    ENDINIT         reduce using rule 77 (funexp -> funexp DIV funexp .)
    SC              reduce using rule 77 (funexp -> funexp DIV funexp .)
    RPAR            reduce using rule 77 (funexp -> funexp DIV funexp .)
    POINTPOINT      reduce using rule 77 (funexp -> funexp DIV funexp .)
    FLECHE          reduce using rule 77 (funexp -> funexp DIV funexp .)
    RACCO           reduce using rule 77 (funexp -> funexp DIV funexp .)
    RCROCHET        reduce using rule 77 (funexp -> funexp DIV funexp .)

  ! PLUS            [ shift and go to state 130 ]
  ! MINUS           [ shift and go to state 131 ]
  ! DIV             [ shift and go to state 132 ]
  ! MULT            [ shift and go to state 133 ]
  ! GEQ             [ shift and go to state 134 ]
  ! GS              [ shift and go to state 135 ]
  ! LS              [ shift and go to state 136 ]
  ! LEQ             [ shift and go to state 137 ]
  ! EQUAL           [ shift and go to state 138 ]
  ! AND             [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]


state 162

    (78) funexp -> funexp MULT funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    DDOT            reduce using rule 78 (funexp -> funexp MULT funexp .)
    PLUS            reduce using rule 78 (funexp -> funexp MULT funexp .)
    MINUS           reduce using rule 78 (funexp -> funexp MULT funexp .)
    DIV             reduce using rule 78 (funexp -> funexp MULT funexp .)
    MULT            reduce using rule 78 (funexp -> funexp MULT funexp .)
    GEQ             reduce using rule 78 (funexp -> funexp MULT funexp .)
    GS              reduce using rule 78 (funexp -> funexp MULT funexp .)
    LS              reduce using rule 78 (funexp -> funexp MULT funexp .)
    LEQ             reduce using rule 78 (funexp -> funexp MULT funexp .)
    EQUAL           reduce using rule 78 (funexp -> funexp MULT funexp .)
    AND             reduce using rule 78 (funexp -> funexp MULT funexp .)
    OR              reduce using rule 78 (funexp -> funexp MULT funexp .)
    ENDINIT         reduce using rule 78 (funexp -> funexp MULT funexp .)
    SC              reduce using rule 78 (funexp -> funexp MULT funexp .)
    RPAR            reduce using rule 78 (funexp -> funexp MULT funexp .)
    POINTPOINT      reduce using rule 78 (funexp -> funexp MULT funexp .)
    FLECHE          reduce using rule 78 (funexp -> funexp MULT funexp .)
    RACCO           reduce using rule 78 (funexp -> funexp MULT funexp .)
    RCROCHET        reduce using rule 78 (funexp -> funexp MULT funexp .)

  ! PLUS            [ shift and go to state 130 ]
  ! MINUS           [ shift and go to state 131 ]
  ! DIV             [ shift and go to state 132 ]
  ! MULT            [ shift and go to state 133 ]
  ! GEQ             [ shift and go to state 134 ]
  ! GS              [ shift and go to state 135 ]
  ! LS              [ shift and go to state 136 ]
  ! LEQ             [ shift and go to state 137 ]
  ! EQUAL           [ shift and go to state 138 ]
  ! AND             [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]


state 163

    (79) funexp -> funexp GEQ funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    DDOT            reduce using rule 79 (funexp -> funexp GEQ funexp .)
    GEQ             reduce using rule 79 (funexp -> funexp GEQ funexp .)
    GS              reduce using rule 79 (funexp -> funexp GEQ funexp .)
    LS              reduce using rule 79 (funexp -> funexp GEQ funexp .)
    LEQ             reduce using rule 79 (funexp -> funexp GEQ funexp .)
    EQUAL           reduce using rule 79 (funexp -> funexp GEQ funexp .)
    AND             reduce using rule 79 (funexp -> funexp GEQ funexp .)
    OR              reduce using rule 79 (funexp -> funexp GEQ funexp .)
    ENDINIT         reduce using rule 79 (funexp -> funexp GEQ funexp .)
    SC              reduce using rule 79 (funexp -> funexp GEQ funexp .)
    RPAR            reduce using rule 79 (funexp -> funexp GEQ funexp .)
    POINTPOINT      reduce using rule 79 (funexp -> funexp GEQ funexp .)
    FLECHE          reduce using rule 79 (funexp -> funexp GEQ funexp .)
    RACCO           reduce using rule 79 (funexp -> funexp GEQ funexp .)
    RCROCHET        reduce using rule 79 (funexp -> funexp GEQ funexp .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133

  ! PLUS            [ reduce using rule 79 (funexp -> funexp GEQ funexp .) ]
  ! MINUS           [ reduce using rule 79 (funexp -> funexp GEQ funexp .) ]
  ! DIV             [ reduce using rule 79 (funexp -> funexp GEQ funexp .) ]
  ! MULT            [ reduce using rule 79 (funexp -> funexp GEQ funexp .) ]
  ! GEQ             [ shift and go to state 134 ]
  ! GS              [ shift and go to state 135 ]
  ! LS              [ shift and go to state 136 ]
  ! LEQ             [ shift and go to state 137 ]
  ! EQUAL           [ shift and go to state 138 ]
  ! AND             [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]


state 164

    (80) funexp -> funexp GS funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    DDOT            reduce using rule 80 (funexp -> funexp GS funexp .)
    GEQ             reduce using rule 80 (funexp -> funexp GS funexp .)
    GS              reduce using rule 80 (funexp -> funexp GS funexp .)
    LS              reduce using rule 80 (funexp -> funexp GS funexp .)
    LEQ             reduce using rule 80 (funexp -> funexp GS funexp .)
    EQUAL           reduce using rule 80 (funexp -> funexp GS funexp .)
    AND             reduce using rule 80 (funexp -> funexp GS funexp .)
    OR              reduce using rule 80 (funexp -> funexp GS funexp .)
    ENDINIT         reduce using rule 80 (funexp -> funexp GS funexp .)
    SC              reduce using rule 80 (funexp -> funexp GS funexp .)
    RPAR            reduce using rule 80 (funexp -> funexp GS funexp .)
    POINTPOINT      reduce using rule 80 (funexp -> funexp GS funexp .)
    FLECHE          reduce using rule 80 (funexp -> funexp GS funexp .)
    RACCO           reduce using rule 80 (funexp -> funexp GS funexp .)
    RCROCHET        reduce using rule 80 (funexp -> funexp GS funexp .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133

  ! PLUS            [ reduce using rule 80 (funexp -> funexp GS funexp .) ]
  ! MINUS           [ reduce using rule 80 (funexp -> funexp GS funexp .) ]
  ! DIV             [ reduce using rule 80 (funexp -> funexp GS funexp .) ]
  ! MULT            [ reduce using rule 80 (funexp -> funexp GS funexp .) ]
  ! GEQ             [ shift and go to state 134 ]
  ! GS              [ shift and go to state 135 ]
  ! LS              [ shift and go to state 136 ]
  ! LEQ             [ shift and go to state 137 ]
  ! EQUAL           [ shift and go to state 138 ]
  ! AND             [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]


state 165

    (81) funexp -> funexp LS funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    DDOT            reduce using rule 81 (funexp -> funexp LS funexp .)
    GEQ             reduce using rule 81 (funexp -> funexp LS funexp .)
    GS              reduce using rule 81 (funexp -> funexp LS funexp .)
    LS              reduce using rule 81 (funexp -> funexp LS funexp .)
    LEQ             reduce using rule 81 (funexp -> funexp LS funexp .)
    EQUAL           reduce using rule 81 (funexp -> funexp LS funexp .)
    AND             reduce using rule 81 (funexp -> funexp LS funexp .)
    OR              reduce using rule 81 (funexp -> funexp LS funexp .)
    ENDINIT         reduce using rule 81 (funexp -> funexp LS funexp .)
    SC              reduce using rule 81 (funexp -> funexp LS funexp .)
    RPAR            reduce using rule 81 (funexp -> funexp LS funexp .)
    POINTPOINT      reduce using rule 81 (funexp -> funexp LS funexp .)
    FLECHE          reduce using rule 81 (funexp -> funexp LS funexp .)
    RACCO           reduce using rule 81 (funexp -> funexp LS funexp .)
    RCROCHET        reduce using rule 81 (funexp -> funexp LS funexp .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133

  ! PLUS            [ reduce using rule 81 (funexp -> funexp LS funexp .) ]
  ! MINUS           [ reduce using rule 81 (funexp -> funexp LS funexp .) ]
  ! DIV             [ reduce using rule 81 (funexp -> funexp LS funexp .) ]
  ! MULT            [ reduce using rule 81 (funexp -> funexp LS funexp .) ]
  ! GEQ             [ shift and go to state 134 ]
  ! GS              [ shift and go to state 135 ]
  ! LS              [ shift and go to state 136 ]
  ! LEQ             [ shift and go to state 137 ]
  ! EQUAL           [ shift and go to state 138 ]
  ! AND             [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]


state 166

    (82) funexp -> funexp LEQ funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    DDOT            reduce using rule 82 (funexp -> funexp LEQ funexp .)
    GEQ             reduce using rule 82 (funexp -> funexp LEQ funexp .)
    GS              reduce using rule 82 (funexp -> funexp LEQ funexp .)
    LS              reduce using rule 82 (funexp -> funexp LEQ funexp .)
    LEQ             reduce using rule 82 (funexp -> funexp LEQ funexp .)
    EQUAL           reduce using rule 82 (funexp -> funexp LEQ funexp .)
    AND             reduce using rule 82 (funexp -> funexp LEQ funexp .)
    OR              reduce using rule 82 (funexp -> funexp LEQ funexp .)
    ENDINIT         reduce using rule 82 (funexp -> funexp LEQ funexp .)
    SC              reduce using rule 82 (funexp -> funexp LEQ funexp .)
    RPAR            reduce using rule 82 (funexp -> funexp LEQ funexp .)
    POINTPOINT      reduce using rule 82 (funexp -> funexp LEQ funexp .)
    FLECHE          reduce using rule 82 (funexp -> funexp LEQ funexp .)
    RACCO           reduce using rule 82 (funexp -> funexp LEQ funexp .)
    RCROCHET        reduce using rule 82 (funexp -> funexp LEQ funexp .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133

  ! PLUS            [ reduce using rule 82 (funexp -> funexp LEQ funexp .) ]
  ! MINUS           [ reduce using rule 82 (funexp -> funexp LEQ funexp .) ]
  ! DIV             [ reduce using rule 82 (funexp -> funexp LEQ funexp .) ]
  ! MULT            [ reduce using rule 82 (funexp -> funexp LEQ funexp .) ]
  ! GEQ             [ shift and go to state 134 ]
  ! GS              [ shift and go to state 135 ]
  ! LS              [ shift and go to state 136 ]
  ! LEQ             [ shift and go to state 137 ]
  ! EQUAL           [ shift and go to state 138 ]
  ! AND             [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]


state 167

    (83) funexp -> funexp EQUAL funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    DDOT            reduce using rule 83 (funexp -> funexp EQUAL funexp .)
    EQUAL           reduce using rule 83 (funexp -> funexp EQUAL funexp .)
    AND             reduce using rule 83 (funexp -> funexp EQUAL funexp .)
    OR              reduce using rule 83 (funexp -> funexp EQUAL funexp .)
    ENDINIT         reduce using rule 83 (funexp -> funexp EQUAL funexp .)
    SC              reduce using rule 83 (funexp -> funexp EQUAL funexp .)
    RPAR            reduce using rule 83 (funexp -> funexp EQUAL funexp .)
    POINTPOINT      reduce using rule 83 (funexp -> funexp EQUAL funexp .)
    FLECHE          reduce using rule 83 (funexp -> funexp EQUAL funexp .)
    RACCO           reduce using rule 83 (funexp -> funexp EQUAL funexp .)
    RCROCHET        reduce using rule 83 (funexp -> funexp EQUAL funexp .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137

  ! PLUS            [ reduce using rule 83 (funexp -> funexp EQUAL funexp .) ]
  ! MINUS           [ reduce using rule 83 (funexp -> funexp EQUAL funexp .) ]
  ! DIV             [ reduce using rule 83 (funexp -> funexp EQUAL funexp .) ]
  ! MULT            [ reduce using rule 83 (funexp -> funexp EQUAL funexp .) ]
  ! GEQ             [ reduce using rule 83 (funexp -> funexp EQUAL funexp .) ]
  ! GS              [ reduce using rule 83 (funexp -> funexp EQUAL funexp .) ]
  ! LS              [ reduce using rule 83 (funexp -> funexp EQUAL funexp .) ]
  ! LEQ             [ reduce using rule 83 (funexp -> funexp EQUAL funexp .) ]
  ! EQUAL           [ shift and go to state 138 ]
  ! AND             [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]


state 168

    (84) funexp -> funexp AND funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    DDOT            reduce using rule 84 (funexp -> funexp AND funexp .)
    AND             reduce using rule 84 (funexp -> funexp AND funexp .)
    OR              reduce using rule 84 (funexp -> funexp AND funexp .)
    ENDINIT         reduce using rule 84 (funexp -> funexp AND funexp .)
    SC              reduce using rule 84 (funexp -> funexp AND funexp .)
    RPAR            reduce using rule 84 (funexp -> funexp AND funexp .)
    POINTPOINT      reduce using rule 84 (funexp -> funexp AND funexp .)
    FLECHE          reduce using rule 84 (funexp -> funexp AND funexp .)
    RACCO           reduce using rule 84 (funexp -> funexp AND funexp .)
    RCROCHET        reduce using rule 84 (funexp -> funexp AND funexp .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138

  ! PLUS            [ reduce using rule 84 (funexp -> funexp AND funexp .) ]
  ! MINUS           [ reduce using rule 84 (funexp -> funexp AND funexp .) ]
  ! DIV             [ reduce using rule 84 (funexp -> funexp AND funexp .) ]
  ! MULT            [ reduce using rule 84 (funexp -> funexp AND funexp .) ]
  ! GEQ             [ reduce using rule 84 (funexp -> funexp AND funexp .) ]
  ! GS              [ reduce using rule 84 (funexp -> funexp AND funexp .) ]
  ! LS              [ reduce using rule 84 (funexp -> funexp AND funexp .) ]
  ! LEQ             [ reduce using rule 84 (funexp -> funexp AND funexp .) ]
  ! EQUAL           [ reduce using rule 84 (funexp -> funexp AND funexp .) ]
  ! AND             [ shift and go to state 139 ]
  ! OR              [ shift and go to state 140 ]


state 169

    (85) funexp -> funexp OR funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    DDOT            reduce using rule 85 (funexp -> funexp OR funexp .)
    OR              reduce using rule 85 (funexp -> funexp OR funexp .)
    ENDINIT         reduce using rule 85 (funexp -> funexp OR funexp .)
    SC              reduce using rule 85 (funexp -> funexp OR funexp .)
    RPAR            reduce using rule 85 (funexp -> funexp OR funexp .)
    POINTPOINT      reduce using rule 85 (funexp -> funexp OR funexp .)
    FLECHE          reduce using rule 85 (funexp -> funexp OR funexp .)
    RACCO           reduce using rule 85 (funexp -> funexp OR funexp .)
    RCROCHET        reduce using rule 85 (funexp -> funexp OR funexp .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139

  ! PLUS            [ reduce using rule 85 (funexp -> funexp OR funexp .) ]
  ! MINUS           [ reduce using rule 85 (funexp -> funexp OR funexp .) ]
  ! DIV             [ reduce using rule 85 (funexp -> funexp OR funexp .) ]
  ! MULT            [ reduce using rule 85 (funexp -> funexp OR funexp .) ]
  ! GEQ             [ reduce using rule 85 (funexp -> funexp OR funexp .) ]
  ! GS              [ reduce using rule 85 (funexp -> funexp OR funexp .) ]
  ! LS              [ reduce using rule 85 (funexp -> funexp OR funexp .) ]
  ! LEQ             [ reduce using rule 85 (funexp -> funexp OR funexp .) ]
  ! EQUAL           [ reduce using rule 85 (funexp -> funexp OR funexp .) ]
  ! AND             [ reduce using rule 85 (funexp -> funexp OR funexp .) ]
  ! OR              [ shift and go to state 140 ]


state 170

    (86) funexp -> LPAR funexp RPAR .

    DDOT            reduce using rule 86 (funexp -> LPAR funexp RPAR .)
    PLUS            reduce using rule 86 (funexp -> LPAR funexp RPAR .)
    MINUS           reduce using rule 86 (funexp -> LPAR funexp RPAR .)
    DIV             reduce using rule 86 (funexp -> LPAR funexp RPAR .)
    MULT            reduce using rule 86 (funexp -> LPAR funexp RPAR .)
    GEQ             reduce using rule 86 (funexp -> LPAR funexp RPAR .)
    GS              reduce using rule 86 (funexp -> LPAR funexp RPAR .)
    LS              reduce using rule 86 (funexp -> LPAR funexp RPAR .)
    LEQ             reduce using rule 86 (funexp -> LPAR funexp RPAR .)
    EQUAL           reduce using rule 86 (funexp -> LPAR funexp RPAR .)
    AND             reduce using rule 86 (funexp -> LPAR funexp RPAR .)
    OR              reduce using rule 86 (funexp -> LPAR funexp RPAR .)
    ENDINIT         reduce using rule 86 (funexp -> LPAR funexp RPAR .)
    SC              reduce using rule 86 (funexp -> LPAR funexp RPAR .)
    RPAR            reduce using rule 86 (funexp -> LPAR funexp RPAR .)
    POINTPOINT      reduce using rule 86 (funexp -> LPAR funexp RPAR .)
    FLECHE          reduce using rule 86 (funexp -> LPAR funexp RPAR .)
    RACCO           reduce using rule 86 (funexp -> LPAR funexp RPAR .)
    RCROCHET        reduce using rule 86 (funexp -> LPAR funexp RPAR .)


state 171

    (93) funexp -> NAME LACCO funexp . RACCO
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    RACCO           shift and go to state 184
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 172

    (20) declParam -> PARAM type NAME DDOT LCROCHET funexp . POINTPOINT funexp RCROCHET
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    POINTPOINT      shift and go to state 185
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 173

    (22) declParam -> PARAM type NAME LACCO funexp POINTPOINT . funexp RACCO
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 186

state 174

    (33) declGlobal -> GLOBALL NAME DDOT LCROCHET funexp POINTPOINT . funexp RCROCHET
    (34) declGlobal -> GLOBALL NAME DDOT LCROCHET funexp POINTPOINT . funexp RCROCHET INIT funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 187

state 175

    (52) trans -> LCROCHET RCROCHET funexp FLECHE . updatesProb
    (54) updatesProb -> . funexp DDOT updates PLUS updatesProb
    (55) updatesProb -> . funexp DDOT updates
    (56) updatesProb -> . updates
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO
    (57) updates -> . upd AND updates
    (58) updates -> . upd
    (59) upd -> . LPAR NAME NEW EQUAL funexp RPAR

    LPAR            shift and go to state 191
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 188
    updatesProb                    shift and go to state 189
    updates                        shift and go to state 190
    upd                            shift and go to state 192

state 176

    (53) trans -> LCROCHET NAME RCROCHET funexp . FLECHE updatesProb
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    FLECHE          shift and go to state 193
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 177

    (47) stateDecl -> NAME DDOT LCROCHET funexp POINTPOINT . funexp RCROCHET
    (48) stateDecl -> NAME DDOT LCROCHET funexp POINTPOINT . funexp RCROCHET INIT funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 194

state 178

    (43) listIdState -> NAME EQUAL NAME VIRGULE . listIdState
    (42) listIdState -> . NAME EQUAL NAME
    (43) listIdState -> . NAME EQUAL NAME VIRGULE listIdState

    NAME            shift and go to state 92

    listIdState                    shift and go to state 195

state 179

    (63) listCond -> NAME . EQUAL funexp AND listCond
    (64) listCond -> NAME . EQUAL funexp

    EQUAL           shift and go to state 196


state 180

    (62) label -> LABEL QUOTE NAME QUOTE EQUAL listCond .

    SC              reduce using rule 62 (label -> LABEL QUOTE NAME QUOTE EQUAL listCond .)


state 181

    (67) rew -> QUOTE NAME QUOTE funexp DDOT funexp . SC rew
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    SC              shift and go to state 197
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 182

    (68) rew -> LCROCHET NAME RCROCHET funexp DDOT funexp . SC rew
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    SC              shift and go to state 198
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 183

    (69) rew -> LCROCHET RCROCHET funexp DDOT funexp SC . rew
    (67) rew -> . QUOTE NAME QUOTE funexp DDOT funexp SC rew
    (68) rew -> . LCROCHET NAME RCROCHET funexp DDOT funexp SC rew
    (69) rew -> . LCROCHET RCROCHET funexp DDOT funexp SC rew
    (70) rew -> . empty
    (1) empty -> .

    QUOTE           shift and go to state 46
    LCROCHET        shift and go to state 47
    ENDREWARDS      reduce using rule 1 (empty -> .)

    rew                            shift and go to state 199
    empty                          shift and go to state 48

state 184

    (93) funexp -> NAME LACCO funexp RACCO .

    DDOT            reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)
    PLUS            reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)
    MINUS           reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)
    DIV             reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)
    MULT            reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)
    GEQ             reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)
    GS              reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)
    LS              reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)
    LEQ             reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)
    EQUAL           reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)
    AND             reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)
    OR              reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)
    ENDINIT         reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)
    SC              reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)
    RPAR            reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)
    POINTPOINT      reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)
    FLECHE          reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)
    RACCO           reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)
    RCROCHET        reduce using rule 93 (funexp -> NAME LACCO funexp RACCO .)


state 185

    (20) declParam -> PARAM type NAME DDOT LCROCHET funexp POINTPOINT . funexp RCROCHET
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 200

state 186

    (22) declParam -> PARAM type NAME LACCO funexp POINTPOINT funexp . RACCO
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    RACCO           shift and go to state 201
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 187

    (33) declGlobal -> GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp . RCROCHET
    (34) declGlobal -> GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp . RCROCHET INIT funexp
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    RCROCHET        shift and go to state 202
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 188

    (54) updatesProb -> funexp . DDOT updates PLUS updatesProb
    (55) updatesProb -> funexp . DDOT updates
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    DDOT            shift and go to state 203
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 189

    (52) trans -> LCROCHET RCROCHET funexp FLECHE updatesProb .

    SC              reduce using rule 52 (trans -> LCROCHET RCROCHET funexp FLECHE updatesProb .)


state 190

    (56) updatesProb -> updates .

    SC              reduce using rule 56 (updatesProb -> updates .)


state 191

    (86) funexp -> LPAR . funexp RPAR
    (59) upd -> LPAR . NAME NEW EQUAL funexp RPAR
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    NAME            shift and go to state 204
    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105

    funexp                         shift and go to state 142

state 192

    (57) updates -> upd . AND updates
    (58) updates -> upd .

    AND             shift and go to state 205
    SC              reduce using rule 58 (updates -> upd .)
    PLUS            reduce using rule 58 (updates -> upd .)


state 193

    (53) trans -> LCROCHET NAME RCROCHET funexp FLECHE . updatesProb
    (54) updatesProb -> . funexp DDOT updates PLUS updatesProb
    (55) updatesProb -> . funexp DDOT updates
    (56) updatesProb -> . updates
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO
    (57) updates -> . upd AND updates
    (58) updates -> . upd
    (59) upd -> . LPAR NAME NEW EQUAL funexp RPAR

    LPAR            shift and go to state 191
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 188
    updatesProb                    shift and go to state 206
    updates                        shift and go to state 190
    upd                            shift and go to state 192

state 194

    (47) stateDecl -> NAME DDOT LCROCHET funexp POINTPOINT funexp . RCROCHET
    (48) stateDecl -> NAME DDOT LCROCHET funexp POINTPOINT funexp . RCROCHET INIT funexp
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    RCROCHET        shift and go to state 207
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 195

    (43) listIdState -> NAME EQUAL NAME VIRGULE listIdState .

    RCROCHET        reduce using rule 43 (listIdState -> NAME EQUAL NAME VIRGULE listIdState .)


state 196

    (63) listCond -> NAME EQUAL . funexp AND listCond
    (64) listCond -> NAME EQUAL . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 208

state 197

    (67) rew -> QUOTE NAME QUOTE funexp DDOT funexp SC . rew
    (67) rew -> . QUOTE NAME QUOTE funexp DDOT funexp SC rew
    (68) rew -> . LCROCHET NAME RCROCHET funexp DDOT funexp SC rew
    (69) rew -> . LCROCHET RCROCHET funexp DDOT funexp SC rew
    (70) rew -> . empty
    (1) empty -> .

    QUOTE           shift and go to state 46
    LCROCHET        shift and go to state 47
    ENDREWARDS      reduce using rule 1 (empty -> .)

    rew                            shift and go to state 209
    empty                          shift and go to state 48

state 198

    (68) rew -> LCROCHET NAME RCROCHET funexp DDOT funexp SC . rew
    (67) rew -> . QUOTE NAME QUOTE funexp DDOT funexp SC rew
    (68) rew -> . LCROCHET NAME RCROCHET funexp DDOT funexp SC rew
    (69) rew -> . LCROCHET RCROCHET funexp DDOT funexp SC rew
    (70) rew -> . empty
    (1) empty -> .

    QUOTE           shift and go to state 46
    LCROCHET        shift and go to state 47
    ENDREWARDS      reduce using rule 1 (empty -> .)

    rew                            shift and go to state 210
    empty                          shift and go to state 48

state 199

    (69) rew -> LCROCHET RCROCHET funexp DDOT funexp SC rew .

    ENDREWARDS      reduce using rule 69 (rew -> LCROCHET RCROCHET funexp DDOT funexp SC rew .)


state 200

    (20) declParam -> PARAM type NAME DDOT LCROCHET funexp POINTPOINT funexp . RCROCHET
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    RCROCHET        shift and go to state 211
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 201

    (22) declParam -> PARAM type NAME LACCO funexp POINTPOINT funexp RACCO .

    SC              reduce using rule 22 (declParam -> PARAM type NAME LACCO funexp POINTPOINT funexp RACCO .)


state 202

    (33) declGlobal -> GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET .
    (34) declGlobal -> GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET . INIT funexp

    SC              reduce using rule 33 (declGlobal -> GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET .)
    INIT            shift and go to state 212


state 203

    (54) updatesProb -> funexp DDOT . updates PLUS updatesProb
    (55) updatesProb -> funexp DDOT . updates
    (57) updates -> . upd AND updates
    (58) updates -> . upd
    (59) upd -> . LPAR NAME NEW EQUAL funexp RPAR

    LPAR            shift and go to state 214

    updates                        shift and go to state 213
    upd                            shift and go to state 192

state 204

    (59) upd -> LPAR NAME . NEW EQUAL funexp RPAR
    (92) funexp -> NAME .
    (93) funexp -> NAME . LACCO funexp RACCO

    NEW             shift and go to state 215
    RPAR            reduce using rule 92 (funexp -> NAME .)
    PLUS            reduce using rule 92 (funexp -> NAME .)
    MINUS           reduce using rule 92 (funexp -> NAME .)
    DIV             reduce using rule 92 (funexp -> NAME .)
    MULT            reduce using rule 92 (funexp -> NAME .)
    GEQ             reduce using rule 92 (funexp -> NAME .)
    GS              reduce using rule 92 (funexp -> NAME .)
    LS              reduce using rule 92 (funexp -> NAME .)
    LEQ             reduce using rule 92 (funexp -> NAME .)
    EQUAL           reduce using rule 92 (funexp -> NAME .)
    AND             reduce using rule 92 (funexp -> NAME .)
    OR              reduce using rule 92 (funexp -> NAME .)
    LACCO           shift and go to state 144


state 205

    (57) updates -> upd AND . updates
    (57) updates -> . upd AND updates
    (58) updates -> . upd
    (59) upd -> . LPAR NAME NEW EQUAL funexp RPAR

    LPAR            shift and go to state 214

    upd                            shift and go to state 192
    updates                        shift and go to state 216

state 206

    (53) trans -> LCROCHET NAME RCROCHET funexp FLECHE updatesProb .

    SC              reduce using rule 53 (trans -> LCROCHET NAME RCROCHET funexp FLECHE updatesProb .)


state 207

    (47) stateDecl -> NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET .
    (48) stateDecl -> NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET . INIT funexp

    SC              reduce using rule 47 (stateDecl -> NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET .)
    INIT            shift and go to state 217


state 208

    (63) listCond -> NAME EQUAL funexp . AND listCond
    (64) listCond -> NAME EQUAL funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    AND             shift and go to state 218
    SC              reduce using rule 64 (listCond -> NAME EQUAL funexp .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    OR              shift and go to state 140


state 209

    (67) rew -> QUOTE NAME QUOTE funexp DDOT funexp SC rew .

    ENDREWARDS      reduce using rule 67 (rew -> QUOTE NAME QUOTE funexp DDOT funexp SC rew .)


state 210

    (68) rew -> LCROCHET NAME RCROCHET funexp DDOT funexp SC rew .

    ENDREWARDS      reduce using rule 68 (rew -> LCROCHET NAME RCROCHET funexp DDOT funexp SC rew .)


state 211

    (20) declParam -> PARAM type NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET .

    SC              reduce using rule 20 (declParam -> PARAM type NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET .)


state 212

    (34) declGlobal -> GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 219

state 213

    (54) updatesProb -> funexp DDOT updates . PLUS updatesProb
    (55) updatesProb -> funexp DDOT updates .

    PLUS            shift and go to state 220
    SC              reduce using rule 55 (updatesProb -> funexp DDOT updates .)


state 214

    (59) upd -> LPAR . NAME NEW EQUAL funexp RPAR

    NAME            shift and go to state 221


state 215

    (59) upd -> LPAR NAME NEW . EQUAL funexp RPAR

    EQUAL           shift and go to state 222


state 216

    (57) updates -> upd AND updates .

    SC              reduce using rule 57 (updates -> upd AND updates .)
    PLUS            reduce using rule 57 (updates -> upd AND updates .)


state 217

    (48) stateDecl -> NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT . funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 223

state 218

    (63) listCond -> NAME EQUAL funexp AND . listCond
    (84) funexp -> funexp AND . funexp
    (63) listCond -> . NAME EQUAL funexp AND listCond
    (64) listCond -> . NAME EQUAL funexp
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    NAME            shift and go to state 224
    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105

    funexp                         shift and go to state 168
    listCond                       shift and go to state 225

state 219

    (34) declGlobal -> GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    SC              reduce using rule 34 (declGlobal -> GLOBALL NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 220

    (54) updatesProb -> funexp DDOT updates PLUS . updatesProb
    (54) updatesProb -> . funexp DDOT updates PLUS updatesProb
    (55) updatesProb -> . funexp DDOT updates
    (56) updatesProb -> . updates
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO
    (57) updates -> . upd AND updates
    (58) updates -> . upd
    (59) upd -> . LPAR NAME NEW EQUAL funexp RPAR

    LPAR            shift and go to state 191
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 188
    updates                        shift and go to state 190
    updatesProb                    shift and go to state 226
    upd                            shift and go to state 192

state 221

    (59) upd -> LPAR NAME . NEW EQUAL funexp RPAR

    NEW             shift and go to state 215


state 222

    (59) upd -> LPAR NAME NEW EQUAL . funexp RPAR
    (75) funexp -> . funexp PLUS funexp
    (76) funexp -> . funexp MINUS funexp
    (77) funexp -> . funexp DIV funexp
    (78) funexp -> . funexp MULT funexp
    (79) funexp -> . funexp GEQ funexp
    (80) funexp -> . funexp GS funexp
    (81) funexp -> . funexp LS funexp
    (82) funexp -> . funexp LEQ funexp
    (83) funexp -> . funexp EQUAL funexp
    (84) funexp -> . funexp AND funexp
    (85) funexp -> . funexp OR funexp
    (86) funexp -> . LPAR funexp RPAR
    (87) funexp -> . NOT funexp
    (88) funexp -> . MINUS funexp
    (89) funexp -> . FLOAT
    (90) funexp -> . TRUE
    (91) funexp -> . FALSE
    (92) funexp -> . NAME
    (93) funexp -> . NAME LACCO funexp RACCO

    LPAR            shift and go to state 101
    NOT             shift and go to state 102
    MINUS           shift and go to state 100
    FLOAT           shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NAME            shift and go to state 106

    funexp                         shift and go to state 227

state 223

    (48) stateDecl -> NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp .
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    SC              reduce using rule 48 (stateDecl -> NAME DDOT LCROCHET funexp POINTPOINT funexp RCROCHET INIT funexp .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 224

    (63) listCond -> NAME . EQUAL funexp AND listCond
    (64) listCond -> NAME . EQUAL funexp
    (92) funexp -> NAME .
    (93) funexp -> NAME . LACCO funexp RACCO

  ! shift/reduce conflict for EQUAL resolved as shift
    EQUAL           shift and go to state 196
    PLUS            reduce using rule 92 (funexp -> NAME .)
    MINUS           reduce using rule 92 (funexp -> NAME .)
    DIV             reduce using rule 92 (funexp -> NAME .)
    MULT            reduce using rule 92 (funexp -> NAME .)
    GEQ             reduce using rule 92 (funexp -> NAME .)
    GS              reduce using rule 92 (funexp -> NAME .)
    LS              reduce using rule 92 (funexp -> NAME .)
    LEQ             reduce using rule 92 (funexp -> NAME .)
    AND             reduce using rule 92 (funexp -> NAME .)
    OR              reduce using rule 92 (funexp -> NAME .)
    SC              reduce using rule 92 (funexp -> NAME .)
    LACCO           shift and go to state 144

  ! EQUAL           [ reduce using rule 92 (funexp -> NAME .) ]


state 225

    (63) listCond -> NAME EQUAL funexp AND listCond .

    SC              reduce using rule 63 (listCond -> NAME EQUAL funexp AND listCond .)


state 226

    (54) updatesProb -> funexp DDOT updates PLUS updatesProb .

    SC              reduce using rule 54 (updatesProb -> funexp DDOT updates PLUS updatesProb .)


state 227

    (59) upd -> LPAR NAME NEW EQUAL funexp . RPAR
    (75) funexp -> funexp . PLUS funexp
    (76) funexp -> funexp . MINUS funexp
    (77) funexp -> funexp . DIV funexp
    (78) funexp -> funexp . MULT funexp
    (79) funexp -> funexp . GEQ funexp
    (80) funexp -> funexp . GS funexp
    (81) funexp -> funexp . LS funexp
    (82) funexp -> funexp . LEQ funexp
    (83) funexp -> funexp . EQUAL funexp
    (84) funexp -> funexp . AND funexp
    (85) funexp -> funexp . OR funexp

    RPAR            shift and go to state 228
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    GEQ             shift and go to state 134
    GS              shift and go to state 135
    LS              shift and go to state 136
    LEQ             shift and go to state 137
    EQUAL           shift and go to state 138
    AND             shift and go to state 139
    OR              shift and go to state 140


state 228

    (59) upd -> LPAR NAME NEW EQUAL funexp RPAR .

    AND             reduce using rule 59 (upd -> LPAR NAME NEW EQUAL funexp RPAR .)
    SC              reduce using rule 59 (upd -> LPAR NAME NEW EQUAL funexp RPAR .)
    PLUS            reduce using rule 59 (upd -> LPAR NAME NEW EQUAL funexp RPAR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for REWARDS in state 2 resolved as shift
WARNING: shift/reduce conflict for INIT in state 2 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 2 resolved as shift
WARNING: shift/reduce conflict for CONST in state 2 resolved as shift
WARNING: shift/reduce conflict for GLOBALL in state 2 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 2 resolved as shift
WARNING: shift/reduce conflict for FORMULA in state 2 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 2 resolved as shift
WARNING: shift/reduce conflict for REWARDS in state 7 resolved as shift
WARNING: shift/reduce conflict for INIT in state 7 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 7 resolved as shift
WARNING: shift/reduce conflict for CONST in state 7 resolved as shift
WARNING: shift/reduce conflict for GLOBALL in state 7 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 7 resolved as shift
WARNING: shift/reduce conflict for FORMULA in state 7 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 7 resolved as shift
WARNING: shift/reduce conflict for REWARDS in state 8 resolved as shift
WARNING: shift/reduce conflict for INIT in state 8 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 8 resolved as shift
WARNING: shift/reduce conflict for CONST in state 8 resolved as shift
WARNING: shift/reduce conflict for GLOBALL in state 8 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 8 resolved as shift
WARNING: shift/reduce conflict for FORMULA in state 8 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 8 resolved as shift
WARNING: shift/reduce conflict for REWARDS in state 9 resolved as shift
WARNING: shift/reduce conflict for INIT in state 9 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 9 resolved as shift
WARNING: shift/reduce conflict for CONST in state 9 resolved as shift
WARNING: shift/reduce conflict for GLOBALL in state 9 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 9 resolved as shift
WARNING: shift/reduce conflict for FORMULA in state 9 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 9 resolved as shift
WARNING: shift/reduce conflict for REWARDS in state 10 resolved as shift
WARNING: shift/reduce conflict for INIT in state 10 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 10 resolved as shift
WARNING: shift/reduce conflict for CONST in state 10 resolved as shift
WARNING: shift/reduce conflict for GLOBALL in state 10 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 10 resolved as shift
WARNING: shift/reduce conflict for FORMULA in state 10 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 10 resolved as shift
WARNING: shift/reduce conflict for REWARDS in state 11 resolved as shift
WARNING: shift/reduce conflict for INIT in state 11 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 11 resolved as shift
WARNING: shift/reduce conflict for CONST in state 11 resolved as shift
WARNING: shift/reduce conflict for GLOBALL in state 11 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 11 resolved as shift
WARNING: shift/reduce conflict for FORMULA in state 11 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 11 resolved as shift
WARNING: shift/reduce conflict for REWARDS in state 12 resolved as shift
WARNING: shift/reduce conflict for INIT in state 12 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 12 resolved as shift
WARNING: shift/reduce conflict for CONST in state 12 resolved as shift
WARNING: shift/reduce conflict for GLOBALL in state 12 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 12 resolved as shift
WARNING: shift/reduce conflict for FORMULA in state 12 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 12 resolved as shift
WARNING: shift/reduce conflict for REWARDS in state 13 resolved as shift
WARNING: shift/reduce conflict for INIT in state 13 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 13 resolved as shift
WARNING: shift/reduce conflict for CONST in state 13 resolved as shift
WARNING: shift/reduce conflict for GLOBALL in state 13 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 13 resolved as shift
WARNING: shift/reduce conflict for FORMULA in state 13 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 13 resolved as shift
WARNING: shift/reduce conflict for REWARDS in state 14 resolved as shift
WARNING: shift/reduce conflict for INIT in state 14 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 14 resolved as shift
WARNING: shift/reduce conflict for CONST in state 14 resolved as shift
WARNING: shift/reduce conflict for GLOBALL in state 14 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 14 resolved as shift
WARNING: shift/reduce conflict for FORMULA in state 14 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 14 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 19 resolved as shift
WARNING: shift/reduce conflict for PARAM in state 40 resolved as shift
WARNING: shift/reduce conflict for CONST in state 41 resolved as shift
WARNING: shift/reduce conflict for GLOBALL in state 42 resolved as shift
WARNING: shift/reduce conflict for LABEL in state 44 resolved as shift
WARNING: shift/reduce conflict for FORMULA in state 52 resolved as shift
WARNING: shift/reduce conflict for REWARDS in state 73 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 224 resolved as shift
WARNING: reduce/reduce conflict in state 15 resolved using rule (unfold -> empty)
WARNING: rejected rule (formulas -> empty) in state 15
